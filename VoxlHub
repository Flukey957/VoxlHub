function SendMessage(url, message)
	local http = game:GetService("HttpService")
	local headers = {
		["Content-Type"] = "application/json"
	}
	local data = {
		["content"] = message
	}
	local body = http:JSONEncode(data)
	local response = request({
		Url = url,
		Method = "POST",
		Headers = headers,
		Body = body
	})
	print("Sent")
end

function SendMessageEMBED(url, embed)
	local http = game:GetService("HttpService")
	local headers = {
		["Content-Type"] = "application/json"
	}
	local data = {
		["embeds"] = {
			{
				["title"] = embed.title,
				["description"] = embed.description,
				["color"] = embed.color,
				["fields"] = embed.fields,
				["footer"] = {
					["text"] = embed.footer.text
				}
			}
		}
	}
	local body = http:JSONEncode(data)
	local response = request({
		Url = url,
		Method = "POST",
		Headers = headers,
		Body = body
	})
	print("Sent")
end


--Examples 

local url = "https://discord.com/api/webhooks/1334129610727886941/8LTYyo0ZDOew51Yu9XNk7HrjbEM-XaGhb9Y4slg4LG9k--P42Vwmeel7oETiKlOSRcN2"


local embed = {
	["title"] = "Whitelist Checker",
	["description"] = "Voxl Hub : Rogue Lineage",
	["color"] = 65280,
	["fields"] = {
		{
			["name"] = "Script Executed",
			["value"] = "User : ".. game.Players.LocalPlayer.DisplayName,
		},
		{
			["name"] = "Key",
			["value"] = "Key : ".. "No Key",
		},
		{
			["name"] = "Hardware ID",
			["value"] = game:GetService("RbxAnalyticsService"):GetClientId()
		}
	},
	["footer"] = {
		["text"] = "VoxlHub On Top"
	}
}
SendMessageEMBED(url, embed)

--[=[
 d888b  db    db d888888b      .d888b.      db      db    db  .d8b.  
88' Y8b 88    88   `88'        VP  `8D      88      88    88 d8' `8b 
88      88    88    88            odD'      88      88    88 88ooo88 
88  ooo 88    88    88          .88'        88      88    88 88~~~88 
88. ~8~ 88b  d88   .88.        j88.         88booo. 88b  d88 88   88    @uniquadev
 Y888P  ~Y8888P' Y888888P      888888D      Y88888P ~Y8888P' YP   YP  CONVERTER 
]=]

-- Instances: 222 | Scripts: 36 | Modules: 0 | Tags: 0
local G2L = {};

-- StarterGui.VoxlHubRL
G2L["1"] = Instance.new("ScreenGui", game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui"));
G2L["1"]["Name"] = [[VoxlHubRL]];
G2L["1"]["ZIndexBehavior"] = Enum.ZIndexBehavior.Sibling;
G2L["1"]["ResetOnSpawn"] = false;


-- StarterGui.VoxlHubRL.test1.1
G2L["2"] = Instance.new("Frame", G2L["1"]);
G2L["2"]["BorderSizePixel"] = 0;
G2L["2"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2"]["Size"] = UDim2.new(0, 450, 0, 325);
G2L["2"]["Position"] = UDim2.new(0.68191, 0, 0.56737, 0);
G2L["2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["2"]["Name"] = [[test1.1]];
G2L["2"]["BackgroundTransparency"] = 0.6;


-- StarterGui.VoxlHubRL.test1.1.setting
G2L["3"] = Instance.new("TextButton", G2L["2"]);
G2L["3"]["BorderSizePixel"] = 0;
G2L["3"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3"]["TextSize"] = 20;
G2L["3"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["3"]["Size"] = UDim2.new(0, 90, 0, 30);
G2L["3"]["BackgroundTransparency"] = 0.85;
G2L["3"]["Name"] = [[setting]];
G2L["3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3"]["Text"] = [[Setting]];
G2L["3"]["Position"] = UDim2.new(0.78, 0, 0.04154, 0);


-- StarterGui.VoxlHubRL.test1.1.setting.LocalScript
G2L["4"] = Instance.new("LocalScript", G2L["3"]);



-- StarterGui.VoxlHubRL.test1.1.combat
G2L["5"] = Instance.new("TextButton", G2L["2"]);
G2L["5"]["BorderSizePixel"] = 0;
G2L["5"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["5"]["TextSize"] = 20;
G2L["5"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["5"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["5"]["Size"] = UDim2.new(0, 87, 0, 30);
G2L["5"]["BackgroundTransparency"] = 0.85;
G2L["5"]["Name"] = [[combat]];
G2L["5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["5"]["Text"] = [[Combat]];
G2L["5"]["Position"] = UDim2.new(0.568, 0, 0.04154, 0);


-- StarterGui.VoxlHubRL.test1.1.combat.LocalScript
G2L["6"] = Instance.new("LocalScript", G2L["5"]);



-- StarterGui.VoxlHubRL.test1.1.Player
G2L["7"] = Instance.new("TextButton", G2L["2"]);
G2L["7"]["BorderSizePixel"] = 0;
G2L["7"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["7"]["TextSize"] = 20;
G2L["7"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["7"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["7"]["Size"] = UDim2.new(0, 90, 0, 30);
G2L["7"]["BackgroundTransparency"] = 0.85;
G2L["7"]["Name"] = [[Player]];
G2L["7"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["7"]["Text"] = [[Player]];
G2L["7"]["Position"] = UDim2.new(0.35, 0, 0.042, 0);


-- StarterGui.VoxlHubRL.test1.1.Player.LocalScript
G2L["8"] = Instance.new("LocalScript", G2L["7"]);



-- StarterGui.VoxlHubRL.test1.1.Main
G2L["9"] = Instance.new("TextButton", G2L["2"]);
G2L["9"]["BorderSizePixel"] = 0;
G2L["9"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["9"]["TextSize"] = 20;
G2L["9"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["9"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["9"]["Size"] = UDim2.new(0, 90, 0, 30);
G2L["9"]["BackgroundTransparency"] = 0.65;
G2L["9"]["Name"] = [[Main]];
G2L["9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["9"]["Text"] = [[Main]];
G2L["9"]["Position"] = UDim2.new(0.13, 0, 0.04154, 0);


-- StarterGui.VoxlHubRL.test1.1.Main.LocalScript
G2L["a"] = Instance.new("LocalScript", G2L["9"]);



-- StarterGui.VoxlHubRL.test1.1.ImageLabel
G2L["b"] = Instance.new("ImageLabel", G2L["2"]);
G2L["b"]["BorderSizePixel"] = 0;
G2L["b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b"]["Image"] = [[rbxassetid://83493970525178]];
G2L["b"]["Size"] = UDim2.new(0, 66, 0, 80);
G2L["b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b"]["BackgroundTransparency"] = 1;
G2L["b"]["Position"] = UDim2.new(-0.01778, 0, -0.04615, 0);


-- StarterGui.VoxlHubRL.test1.1.UICorner
G2L["c"] = Instance.new("UICorner", G2L["2"]);



-- StarterGui.VoxlHubRL.test1.1.LootingTime
G2L["d"] = Instance.new("LocalScript", G2L["2"]);
G2L["d"]["Name"] = [[LootingTime]];


-- StarterGui.VoxlHubRL.test1.1.Spectatescriptoldfirst
G2L["e"] = Instance.new("LocalScript", G2L["2"]);
G2L["e"]["Enabled"] = false;
G2L["e"]["Name"] = [[Spectatescriptoldfirst]];
G2L["e"]["Disabled"] = true;


-- StarterGui.VoxlHubRL.test1.1.esp
G2L["f"] = Instance.new("TextButton", G2L["2"]);
G2L["f"]["BorderSizePixel"] = 0;
G2L["f"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f"]["TextSize"] = 20;
G2L["f"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["f"]["Size"] = UDim2.new(0, 90, 0, 30);
G2L["f"]["BackgroundTransparency"] = 0.85;
G2L["f"]["Name"] = [[esp]];
G2L["f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["f"]["Text"] = [[Esp]];
G2L["f"]["Position"] = UDim2.new(0.009, 0, 0.198, 0);


-- StarterGui.VoxlHubRL.test1.1.esp.LocalScript
G2L["10"] = Instance.new("LocalScript", G2L["f"]);



-- StarterGui.VoxlHubRL.test1.1.fly
G2L["11"] = Instance.new("TextButton", G2L["2"]);
G2L["11"]["BorderSizePixel"] = 0;
G2L["11"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["11"]["TextSize"] = 20;
G2L["11"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["11"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["11"]["Size"] = UDim2.new(0, 90, 0, 30);
G2L["11"]["BackgroundTransparency"] = 0.85;
G2L["11"]["Name"] = [[fly]];
G2L["11"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["11"]["Text"] = [[Fly]];
G2L["11"]["Position"] = UDim2.new(0.009, 0, 0.327, 0);


-- StarterGui.VoxlHubRL.test1.1.PlayerInfo
G2L["12"] = Instance.new("Frame", G2L["2"]);
G2L["12"]["Visible"] = false;
G2L["12"]["BorderSizePixel"] = 0;
G2L["12"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["12"]["Size"] = UDim2.new(0, 243, 0, 322);
G2L["12"]["Position"] = UDim2.new(0.25889, 0, -1.54462, 0);
G2L["12"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["12"]["Name"] = [[PlayerInfo]];
G2L["12"]["BackgroundTransparency"] = 0.6;


-- StarterGui.VoxlHubRL.test1.1.PlayerInfo.Username
G2L["13"] = Instance.new("TextLabel", G2L["12"]);
G2L["13"]["BorderSizePixel"] = 0;
G2L["13"]["TextSize"] = 14;
G2L["13"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["13"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["13"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["13"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["13"]["BackgroundTransparency"] = 1;
G2L["13"]["Size"] = UDim2.new(0, 57, 0, 50);
G2L["13"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["13"]["Text"] = [[Username :]];
G2L["13"]["Name"] = [[Username]];
G2L["13"]["Position"] = UDim2.new(0.045, 0, 0, 17);


-- StarterGui.VoxlHubRL.test1.1.PlayerInfo.Username.UsernameN
G2L["14"] = Instance.new("TextLabel", G2L["13"]);
G2L["14"]["BorderSizePixel"] = 0;
G2L["14"]["TextSize"] = 14;
G2L["14"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["14"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["14"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["14"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["14"]["BackgroundTransparency"] = 1;
G2L["14"]["Size"] = UDim2.new(0, 188, 0, 50);
G2L["14"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["14"]["Text"] = [[Unknow]];
G2L["14"]["Name"] = [[UsernameN]];
G2L["14"]["Position"] = UDim2.new(1.03134, 0, 0, 0);


-- StarterGui.VoxlHubRL.test1.1.PlayerInfo.Username.Cpyclipboard
G2L["15"] = Instance.new("TextButton", G2L["13"]);
G2L["15"]["BorderSizePixel"] = 0;
G2L["15"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["15"]["TextSize"] = 13;
G2L["15"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["15"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["15"]["Size"] = UDim2.new(0, 32, 0, 11);
G2L["15"]["BackgroundTransparency"] = 0.85;
G2L["15"]["Name"] = [[Cpyclipboard]];
G2L["15"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["15"]["Text"] = [[Copy]];
G2L["15"]["Position"] = UDim2.new(3.323, 0, 0.438, 0);


-- StarterGui.VoxlHubRL.test1.1.PlayerInfo.Username.Cpyclipboard.LocalScript
G2L["16"] = Instance.new("LocalScript", G2L["15"]);



-- StarterGui.VoxlHubRL.test1.1.PlayerInfo.IngameName
G2L["17"] = Instance.new("TextLabel", G2L["12"]);
G2L["17"]["BorderSizePixel"] = 0;
G2L["17"]["TextSize"] = 14;
G2L["17"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["17"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["17"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["17"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["17"]["BackgroundTransparency"] = 1;
G2L["17"]["Size"] = UDim2.new(0, 66, 0, 50);
G2L["17"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["17"]["Text"] = [[Ingame Name :]];
G2L["17"]["Name"] = [[IngameName]];
G2L["17"]["Position"] = UDim2.new(0.045, 0, 0.12, 0);


-- StarterGui.VoxlHubRL.test1.1.PlayerInfo.IngameName.IngameNameN
G2L["18"] = Instance.new("TextLabel", G2L["17"]);
G2L["18"]["BorderSizePixel"] = 0;
G2L["18"]["TextSize"] = 14;
G2L["18"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["18"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["18"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["18"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["18"]["BackgroundTransparency"] = 1;
G2L["18"]["Size"] = UDim2.new(0, 188, 0, 50);
G2L["18"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["18"]["Text"] = [[Unknow]];
G2L["18"]["Name"] = [[IngameNameN]];
G2L["18"]["Position"] = UDim2.new(1.15442, 0, 0, 0);


-- StarterGui.VoxlHubRL.test1.1.PlayerInfo.IngameName.Cpyclipboard
G2L["19"] = Instance.new("TextButton", G2L["17"]);
G2L["19"]["BorderSizePixel"] = 0;
G2L["19"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["19"]["TextSize"] = 13;
G2L["19"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["19"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["19"]["Size"] = UDim2.new(0, 32, 0, 11);
G2L["19"]["BackgroundTransparency"] = 0.85;
G2L["19"]["Name"] = [[Cpyclipboard]];
G2L["19"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["19"]["Text"] = [[Copy]];
G2L["19"]["Position"] = UDim2.new(2.86845, 0, 0.458, 0);


-- StarterGui.VoxlHubRL.test1.1.PlayerInfo.IngameName.Cpyclipboard.LocalScript
G2L["1a"] = Instance.new("LocalScript", G2L["19"]);



-- StarterGui.VoxlHubRL.test1.1.PlayerInfo.Class
G2L["1b"] = Instance.new("TextLabel", G2L["12"]);
G2L["1b"]["BorderSizePixel"] = 0;
G2L["1b"]["TextSize"] = 14;
G2L["1b"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1b"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1b"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1b"]["BackgroundTransparency"] = 1;
G2L["1b"]["Size"] = UDim2.new(0, 43, 0, 50);
G2L["1b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1b"]["Text"] = [[Class :]];
G2L["1b"]["Name"] = [[Class]];
G2L["1b"]["Position"] = UDim2.new(0.045, 0, 0.185, 0);


-- StarterGui.VoxlHubRL.test1.1.PlayerInfo.Class.ClassN
G2L["1c"] = Instance.new("TextLabel", G2L["1b"]);
G2L["1c"]["BorderSizePixel"] = 0;
G2L["1c"]["TextSize"] = 14;
G2L["1c"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1c"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1c"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1c"]["BackgroundTransparency"] = 1;
G2L["1c"]["Size"] = UDim2.new(0, 188, 0, 50);
G2L["1c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1c"]["Text"] = [[Unknow]];
G2L["1c"]["Name"] = [[ClassN]];
G2L["1c"]["Position"] = UDim2.new(0.80057, 0, 0, 0);


-- StarterGui.VoxlHubRL.test1.1.PlayerInfo.SkillNN
G2L["1d"] = Instance.new("TextLabel", G2L["12"]);
G2L["1d"]["BorderSizePixel"] = 0;
G2L["1d"]["TextSize"] = 14;
G2L["1d"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1d"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1d"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1d"]["BackgroundTransparency"] = 1;
G2L["1d"]["Size"] = UDim2.new(0, 36, 0, 50);
G2L["1d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1d"]["Text"] = [[Skill :]];
G2L["1d"]["Name"] = [[SkillNN]];
G2L["1d"]["Position"] = UDim2.new(0.04527, 0, 0.25, 0);


-- StarterGui.VoxlHubRL.test1.1.PlayerInfo.PlayersInfoscript
G2L["1e"] = Instance.new("LocalScript", G2L["12"]);
G2L["1e"]["Name"] = [[PlayersInfoscript]];


-- StarterGui.VoxlHubRL.test1.1.PlayerInfo.PlayerInfoo
G2L["1f"] = Instance.new("TextLabel", G2L["12"]);
G2L["1f"]["BorderSizePixel"] = 0;
G2L["1f"]["TextSize"] = 25;
G2L["1f"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["1f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1f"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["1f"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1f"]["BackgroundTransparency"] = 1;
G2L["1f"]["Size"] = UDim2.new(0, 168, 0, 50);
G2L["1f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1f"]["Text"] = [[Player Information]];
G2L["1f"]["Name"] = [[PlayerInfoo]];
G2L["1f"]["Position"] = UDim2.new(0.152, 0, -0.07453, 17);


-- StarterGui.VoxlHubRL.test1.1.PlayerInfo.Skill
G2L["20"] = Instance.new("ScrollingFrame", G2L["12"]);
G2L["20"]["Active"] = true;
G2L["20"]["BorderSizePixel"] = 0;
G2L["20"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["20"]["Name"] = [[Skill]];
G2L["20"]["Size"] = UDim2.new(0, 206, 0, 221);
G2L["20"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["20"]["Position"] = UDim2.new(0.152, 0, 0.308, 0);
G2L["20"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["20"]["ScrollBarThickness"] = 3;
G2L["20"]["BackgroundTransparency"] = 1;


-- StarterGui.VoxlHubRL.test1.1.PlayerInfo.Skill.SkillN
G2L["21"] = Instance.new("TextLabel", G2L["20"]);
G2L["21"]["TextWrapped"] = true;
G2L["21"]["BorderSizePixel"] = 0;
G2L["21"]["TextSize"] = 14;
G2L["21"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["21"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["21"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["21"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["21"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["21"]["BackgroundTransparency"] = 1;
G2L["21"]["Size"] = UDim2.new(0, 184, 0, 497);
G2L["21"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["21"]["Text"] = [[Unknow]];
G2L["21"]["Name"] = [[SkillN]];
G2L["21"]["Position"] = UDim2.new(0.023, 0, 0, 0);


-- StarterGui.VoxlHubRL.test1.1.Spectatescriptoldsecond
G2L["22"] = Instance.new("LocalScript", G2L["2"]);
G2L["22"]["Enabled"] = false;
G2L["22"]["Name"] = [[Spectatescriptoldsecond]];
G2L["22"]["Disabled"] = true;


-- StarterGui.VoxlHubRL.test1.1.Spectatescriptoldthird
G2L["23"] = Instance.new("LocalScript", G2L["2"]);
G2L["23"]["Name"] = [[Spectatescriptoldthird]];


-- StarterGui.VoxlHubRL.test1.1.SettingFrame
G2L["24"] = Instance.new("ScrollingFrame", G2L["2"]);
G2L["24"]["Active"] = true;
G2L["24"]["BorderSizePixel"] = 0;
G2L["24"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["24"]["Name"] = [[SettingFrame]];
G2L["24"]["Size"] = UDim2.new(0, 339, 0, 263);
G2L["24"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["24"]["Position"] = UDim2.new(0.22667, 0, 0.17231, 0);
G2L["24"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["24"]["ScrollBarThickness"] = 2;
G2L["24"]["BackgroundTransparency"] = 0.5;


-- StarterGui.VoxlHubRL.test1.1.SettingFrame.UICorner
G2L["25"] = Instance.new("UICorner", G2L["24"]);



-- StarterGui.VoxlHubRL.test1.1.SettingFrame.KeybindSetting
G2L["26"] = Instance.new("TextLabel", G2L["24"]);
G2L["26"]["BorderSizePixel"] = 0;
G2L["26"]["TextSize"] = 15;
G2L["26"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["26"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["26"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["26"]["BackgroundTransparency"] = 1;
G2L["26"]["Size"] = UDim2.new(0, 99, 0, 39);
G2L["26"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["26"]["Text"] = [[Keybind Setting]];
G2L["26"]["Name"] = [[KeybindSetting]];
G2L["26"]["Position"] = UDim2.new(0.35595, 0, 0.00419, 0);


-- StarterGui.VoxlHubRL.test1.1.SettingFrame.KeybindSetting.UICorner
G2L["27"] = Instance.new("UICorner", G2L["26"]);



-- StarterGui.VoxlHubRL.test1.1.SettingFrame.MaxHealerSetting
G2L["28"] = Instance.new("TextLabel", G2L["24"]);
G2L["28"]["TextWrapped"] = true;
G2L["28"]["BorderSizePixel"] = 0;
G2L["28"]["TextSize"] = 14;
G2L["28"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["28"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["28"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["28"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["28"]["BackgroundTransparency"] = 0.65;
G2L["28"]["Size"] = UDim2.new(0, 99, 0, 39);
G2L["28"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["28"]["Text"] = [[     Healer]];
G2L["28"]["Name"] = [[MaxHealerSetting]];
G2L["28"]["Position"] = UDim2.new(0.014, 0, 0.06, 0);


-- StarterGui.VoxlHubRL.test1.1.SettingFrame.MaxHealerSetting.UICorner
G2L["29"] = Instance.new("UICorner", G2L["28"]);



-- StarterGui.VoxlHubRL.test1.1.SettingFrame.MaxHealerSetting.Action1
G2L["2a"] = Instance.new("TextButton", G2L["28"]);
G2L["2a"]["BorderSizePixel"] = 0;
G2L["2a"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["2a"]["TextSize"] = 14;
G2L["2a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2a"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["2a"]["Size"] = UDim2.new(0, 98, 0, 35);
G2L["2a"]["BackgroundTransparency"] = 1;
G2L["2a"]["Name"] = [[Action1]];
G2L["2a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["2a"]["Text"] = [[]];
G2L["2a"]["Position"] = UDim2.new(0, 0, 0.06192, 0);


-- StarterGui.VoxlHubRL.test1.1.SettingFrame.MaxHealerSetting.Action1Text
G2L["2b"] = Instance.new("TextLabel", G2L["28"]);
G2L["2b"]["BorderSizePixel"] = 0;
G2L["2b"]["TextSize"] = 14;
G2L["2b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2b"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["2b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2b"]["BackgroundTransparency"] = 0.5;
G2L["2b"]["Size"] = UDim2.new(0, 29, 0, 25);
G2L["2b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["2b"]["Text"] = [[None]];
G2L["2b"]["Name"] = [[Action1Text]];
G2L["2b"]["Position"] = UDim2.new(0.57, 0, 0.187, 0);


-- StarterGui.VoxlHubRL.test1.1.SettingFrame.MaxHealerSetting.Action1Text.UICorner
G2L["2c"] = Instance.new("UICorner", G2L["2b"]);



-- StarterGui.VoxlHubRL.test1.1.SettingFrame.MaxHealerSetting.LocalScript
G2L["2d"] = Instance.new("LocalScript", G2L["28"]);



-- StarterGui.VoxlHubRL.test1.1.SettingFrame.ToggleUI
G2L["2e"] = Instance.new("TextLabel", G2L["24"]);
G2L["2e"]["TextWrapped"] = true;
G2L["2e"]["BorderSizePixel"] = 0;
G2L["2e"]["TextSize"] = 14;
G2L["2e"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["2e"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["2e"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["2e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["2e"]["BackgroundTransparency"] = 0.65;
G2L["2e"]["Size"] = UDim2.new(0, 99, 0, 39);
G2L["2e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["2e"]["Text"] = [[  Toggle UI]];
G2L["2e"]["Name"] = [[ToggleUI]];
G2L["2e"]["Position"] = UDim2.new(0.355, 0, 0.06, 0);


-- StarterGui.VoxlHubRL.test1.1.SettingFrame.ToggleUI.UICorner
G2L["2f"] = Instance.new("UICorner", G2L["2e"]);



-- StarterGui.VoxlHubRL.test1.1.SettingFrame.ToggleUI.Action1
G2L["30"] = Instance.new("TextButton", G2L["2e"]);
G2L["30"]["BorderSizePixel"] = 0;
G2L["30"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["30"]["TextSize"] = 14;
G2L["30"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["30"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["30"]["Size"] = UDim2.new(0, 98, 0, 35);
G2L["30"]["BackgroundTransparency"] = 1;
G2L["30"]["Name"] = [[Action1]];
G2L["30"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["30"]["Text"] = [[]];
G2L["30"]["Position"] = UDim2.new(0, 0, 0.06192, 0);


-- StarterGui.VoxlHubRL.test1.1.SettingFrame.ToggleUI.Action1Text
G2L["31"] = Instance.new("TextLabel", G2L["2e"]);
G2L["31"]["BorderSizePixel"] = 0;
G2L["31"]["TextSize"] = 14;
G2L["31"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["31"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["31"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["31"]["BackgroundTransparency"] = 0.5;
G2L["31"]["Size"] = UDim2.new(0, 29, 0, 25);
G2L["31"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["31"]["Text"] = [[LeftAlt]];
G2L["31"]["Name"] = [[Action1Text]];
G2L["31"]["Position"] = UDim2.new(0.57, 0, 0.187, 0);


-- StarterGui.VoxlHubRL.test1.1.SettingFrame.ToggleUI.Action1Text.UICorner
G2L["32"] = Instance.new("UICorner", G2L["31"]);



-- StarterGui.VoxlHubRL.test1.1.SettingFrame.ToggleUI.LocalScript
G2L["33"] = Instance.new("LocalScript", G2L["2e"]);



-- StarterGui.VoxlHubRL.test1.1.SettingFrame.WorldPulseSetting
G2L["34"] = Instance.new("TextLabel", G2L["24"]);
G2L["34"]["TextWrapped"] = true;
G2L["34"]["BorderSizePixel"] = 0;
G2L["34"]["TextSize"] = 14;
G2L["34"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["34"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["34"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["34"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["34"]["BackgroundTransparency"] = 0.65;
G2L["34"]["Size"] = UDim2.new(0, 99, 0, 39);
G2L["34"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["34"]["Text"] = [[]];
G2L["34"]["Name"] = [[WorldPulseSetting]];
G2L["34"]["Position"] = UDim2.new(0.698, 0, 0.06, 0);


-- StarterGui.VoxlHubRL.test1.1.SettingFrame.WorldPulseSetting.UICorner
G2L["35"] = Instance.new("UICorner", G2L["34"]);



-- StarterGui.VoxlHubRL.test1.1.SettingFrame.WorldPulseSetting.Action1
G2L["36"] = Instance.new("TextButton", G2L["34"]);
G2L["36"]["BorderSizePixel"] = 0;
G2L["36"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["36"]["TextSize"] = 14;
G2L["36"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["36"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["36"]["Size"] = UDim2.new(0, 98, 0, 35);
G2L["36"]["BackgroundTransparency"] = 1;
G2L["36"]["Name"] = [[Action1]];
G2L["36"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["36"]["Text"] = [[]];
G2L["36"]["Position"] = UDim2.new(0, 0, 0.06192, 0);


-- StarterGui.VoxlHubRL.test1.1.SettingFrame.WorldPulseSetting.Action1Text
G2L["37"] = Instance.new("TextLabel", G2L["34"]);
G2L["37"]["BorderSizePixel"] = 0;
G2L["37"]["TextSize"] = 14;
G2L["37"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["37"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["37"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["37"]["BackgroundTransparency"] = 0.5;
G2L["37"]["Size"] = UDim2.new(0, 29, 0, 25);
G2L["37"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["37"]["Text"] = [[None]];
G2L["37"]["Name"] = [[Action1Text]];
G2L["37"]["Position"] = UDim2.new(0.57, 0, 0.187, 0);


-- StarterGui.VoxlHubRL.test1.1.SettingFrame.WorldPulseSetting.Action1Text.UICorner
G2L["38"] = Instance.new("UICorner", G2L["37"]);



-- StarterGui.VoxlHubRL.test1.1.SettingFrame.WorldPulseSetting.LocalScript
G2L["39"] = Instance.new("LocalScript", G2L["34"]);



-- StarterGui.VoxlHubRL.test1.1.SettingFrame.WorldPulseSetting.Text
G2L["3a"] = Instance.new("TextLabel", G2L["34"]);
G2L["3a"]["TextWrapped"] = true;
G2L["3a"]["BorderSizePixel"] = 0;
G2L["3a"]["TextSize"] = 14;
G2L["3a"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3a"]["TextDirection"] = Enum.TextDirection.LeftToRight;
G2L["3a"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["3a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3a"]["BackgroundTransparency"] = 1;
G2L["3a"]["Size"] = UDim2.new(0, 46, 0, 28);
G2L["3a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3a"]["Text"] = [[World  Pulse]];
G2L["3a"]["Name"] = [[Text]];
G2L["3a"]["Position"] = UDim2.new(0.05819, 0, 0.1241, 0);


-- StarterGui.VoxlHubRL.test1.1.SettingFrame.HealthBarSetting
G2L["3b"] = Instance.new("TextLabel", G2L["24"]);
G2L["3b"]["TextWrapped"] = true;
G2L["3b"]["BorderSizePixel"] = 0;
G2L["3b"]["TextSize"] = 14;
G2L["3b"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["3b"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3b"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["3b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3b"]["BackgroundTransparency"] = 0.65;
G2L["3b"]["Size"] = UDim2.new(0, 99, 0, 39);
G2L["3b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3b"]["Text"] = [[  HealthBar]];
G2L["3b"]["Name"] = [[HealthBarSetting]];
G2L["3b"]["Position"] = UDim2.new(0.014, 0, 0.13, 0);


-- StarterGui.VoxlHubRL.test1.1.SettingFrame.HealthBarSetting.UICorner
G2L["3c"] = Instance.new("UICorner", G2L["3b"]);



-- StarterGui.VoxlHubRL.test1.1.SettingFrame.HealthBarSetting.Action1
G2L["3d"] = Instance.new("TextButton", G2L["3b"]);
G2L["3d"]["BorderSizePixel"] = 0;
G2L["3d"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3d"]["TextSize"] = 14;
G2L["3d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3d"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["3d"]["Size"] = UDim2.new(0, 98, 0, 35);
G2L["3d"]["BackgroundTransparency"] = 1;
G2L["3d"]["Name"] = [[Action1]];
G2L["3d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3d"]["Text"] = [[]];
G2L["3d"]["Position"] = UDim2.new(0, 0, 0.06192, 0);


-- StarterGui.VoxlHubRL.test1.1.SettingFrame.HealthBarSetting.Action1Text
G2L["3e"] = Instance.new("TextLabel", G2L["3b"]);
G2L["3e"]["BorderSizePixel"] = 0;
G2L["3e"]["TextSize"] = 14;
G2L["3e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3e"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["3e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["3e"]["BackgroundTransparency"] = 0.5;
G2L["3e"]["Size"] = UDim2.new(0, 29, 0, 25);
G2L["3e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["3e"]["Text"] = [[None]];
G2L["3e"]["Name"] = [[Action1Text]];
G2L["3e"]["Position"] = UDim2.new(0.57, 0, 0.187, 0);


-- StarterGui.VoxlHubRL.test1.1.SettingFrame.HealthBarSetting.Action1Text.UICorner
G2L["3f"] = Instance.new("UICorner", G2L["3e"]);



-- StarterGui.VoxlHubRL.test1.1.SettingFrame.HealthBarSetting.LocalScript
G2L["40"] = Instance.new("LocalScript", G2L["3b"]);



-- StarterGui.VoxlHubRL.test1.1.SettingFrame.AimbotGrappleSetting
G2L["41"] = Instance.new("TextLabel", G2L["24"]);
G2L["41"]["TextWrapped"] = true;
G2L["41"]["BorderSizePixel"] = 0;
G2L["41"]["TextSize"] = 14;
G2L["41"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["41"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["41"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["41"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["41"]["BackgroundTransparency"] = 0.65;
G2L["41"]["Size"] = UDim2.new(0, 99, 0, 39);
G2L["41"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["41"]["Text"] = [[]];
G2L["41"]["Name"] = [[AimbotGrappleSetting]];
G2L["41"]["Position"] = UDim2.new(0.355, 0, 0.13, 0);


-- StarterGui.VoxlHubRL.test1.1.SettingFrame.AimbotGrappleSetting.UICorner
G2L["42"] = Instance.new("UICorner", G2L["41"]);



-- StarterGui.VoxlHubRL.test1.1.SettingFrame.AimbotGrappleSetting.Action1
G2L["43"] = Instance.new("TextButton", G2L["41"]);
G2L["43"]["BorderSizePixel"] = 0;
G2L["43"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["43"]["TextSize"] = 14;
G2L["43"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["43"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["43"]["Size"] = UDim2.new(0, 98, 0, 35);
G2L["43"]["BackgroundTransparency"] = 1;
G2L["43"]["Name"] = [[Action1]];
G2L["43"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["43"]["Text"] = [[]];
G2L["43"]["Position"] = UDim2.new(0, 0, 0.06192, 0);


-- StarterGui.VoxlHubRL.test1.1.SettingFrame.AimbotGrappleSetting.Action1Text
G2L["44"] = Instance.new("TextLabel", G2L["41"]);
G2L["44"]["BorderSizePixel"] = 0;
G2L["44"]["TextSize"] = 14;
G2L["44"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["44"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["44"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["44"]["BackgroundTransparency"] = 0.5;
G2L["44"]["Size"] = UDim2.new(0, 29, 0, 25);
G2L["44"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["44"]["Text"] = [[None]];
G2L["44"]["Name"] = [[Action1Text]];
G2L["44"]["Position"] = UDim2.new(0.57, 0, 0.187, 0);


-- StarterGui.VoxlHubRL.test1.1.SettingFrame.AimbotGrappleSetting.Action1Text.UICorner
G2L["45"] = Instance.new("UICorner", G2L["44"]);



-- StarterGui.VoxlHubRL.test1.1.SettingFrame.AimbotGrappleSetting.LocalScript
G2L["46"] = Instance.new("LocalScript", G2L["41"]);



-- StarterGui.VoxlHubRL.test1.1.SettingFrame.AimbotGrappleSetting.Text
G2L["47"] = Instance.new("TextLabel", G2L["41"]);
G2L["47"]["TextWrapped"] = true;
G2L["47"]["BorderSizePixel"] = 0;
G2L["47"]["TextSize"] = 14;
G2L["47"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["47"]["TextDirection"] = Enum.TextDirection.LeftToRight;
G2L["47"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["47"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["47"]["BackgroundTransparency"] = 1;
G2L["47"]["Size"] = UDim2.new(0, 46, 0, 28);
G2L["47"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["47"]["Text"] = [[Aimbot Grapple]];
G2L["47"]["Name"] = [[Text]];
G2L["47"]["Position"] = UDim2.new(0.05819, 0, 0.1241, 0);


-- StarterGui.VoxlHubRL.test1.1.MainFrame
G2L["48"] = Instance.new("ScrollingFrame", G2L["2"]);
G2L["48"]["Visible"] = false;
G2L["48"]["Active"] = true;
G2L["48"]["BorderSizePixel"] = 0;
G2L["48"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["48"]["Name"] = [[MainFrame]];
G2L["48"]["Size"] = UDim2.new(0, 339, 0, 263);
G2L["48"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["48"]["Position"] = UDim2.new(0.22667, 0, 0.17231, 0);
G2L["48"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["48"]["ScrollBarThickness"] = 2;
G2L["48"]["BackgroundTransparency"] = 0.5;


-- StarterGui.VoxlHubRL.test1.1.MainFrame.UICorner
G2L["49"] = Instance.new("UICorner", G2L["48"]);



-- StarterGui.VoxlHubRL.test1.1.MainFrame.Nofall
G2L["4a"] = Instance.new("TextLabel", G2L["48"]);
G2L["4a"]["BorderSizePixel"] = 0;
G2L["4a"]["TextSize"] = 14;
G2L["4a"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["4a"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["4a"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["4a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["4a"]["BackgroundTransparency"] = 0.65;
G2L["4a"]["Size"] = UDim2.new(0, 99, 0, 39);
G2L["4a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["4a"]["Text"] = [[     NoFall]];
G2L["4a"]["Name"] = [[Nofall]];
G2L["4a"]["Position"] = UDim2.new(0.356, 0, 0.015, 0);


-- StarterGui.VoxlHubRL.test1.1.MainFrame.Nofall.Toggle
G2L["4b"] = Instance.new("ImageLabel", G2L["4a"]);
G2L["4b"]["BorderSizePixel"] = 0;
G2L["4b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["4b"]["ImageColor3"] = Color3.fromRGB(201, 201, 201);
G2L["4b"]["Image"] = [[rbxassetid://16382316568]];
G2L["4b"]["Size"] = UDim2.new(0, 37, 0, 22);
G2L["4b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["4b"]["Name"] = [[Toggle]];
G2L["4b"]["Position"] = UDim2.new(0.53234, 0, 0.222, 0);


-- StarterGui.VoxlHubRL.test1.1.MainFrame.Nofall.Toggle.UICorner
G2L["4c"] = Instance.new("UICorner", G2L["4b"]);
G2L["4c"]["CornerRadius"] = UDim.new(1, 0);


-- StarterGui.VoxlHubRL.test1.1.MainFrame.Nofall.Toggle.Button
G2L["4d"] = Instance.new("TextButton", G2L["4b"]);
G2L["4d"]["BorderSizePixel"] = 0;
G2L["4d"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["4d"]["TextSize"] = 14;
G2L["4d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["4d"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["4d"]["Size"] = UDim2.new(0, 98, 0, 39);
G2L["4d"]["BackgroundTransparency"] = 1;
G2L["4d"]["Name"] = [[Button]];
G2L["4d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["4d"]["Text"] = [[]];
G2L["4d"]["Position"] = UDim2.new(-1.41087, 0, -0.37651, 0);


-- StarterGui.VoxlHubRL.test1.1.MainFrame.Nofall.Toggle.Button.Script
G2L["4e"] = Instance.new("LocalScript", G2L["4d"]);
G2L["4e"]["Name"] = [[Script]];


-- StarterGui.VoxlHubRL.test1.1.MainFrame.Nofall.Toggle.Circle
G2L["4f"] = Instance.new("Frame", G2L["4b"]);
G2L["4f"]["BorderSizePixel"] = 0;
G2L["4f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["4f"]["Size"] = UDim2.new(0, 18, 0, 18);
G2L["4f"]["Position"] = UDim2.new(0.05, 0, 0, 2);
G2L["4f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["4f"]["Name"] = [[Circle]];


-- StarterGui.VoxlHubRL.test1.1.MainFrame.Nofall.Toggle.Circle.UICorner
G2L["50"] = Instance.new("UICorner", G2L["4f"]);
G2L["50"]["CornerRadius"] = UDim.new(1, 0);


-- StarterGui.VoxlHubRL.test1.1.MainFrame.Nofall.UICorner
G2L["51"] = Instance.new("UICorner", G2L["4a"]);



-- StarterGui.VoxlHubRL.test1.1.MainFrame.Nofire
G2L["52"] = Instance.new("TextLabel", G2L["48"]);
G2L["52"]["BorderSizePixel"] = 0;
G2L["52"]["TextSize"] = 14;
G2L["52"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["52"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["52"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["52"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["52"]["BackgroundTransparency"] = 0.65;
G2L["52"]["Size"] = UDim2.new(0, 99, 0, 39);
G2L["52"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["52"]["Text"] = [[     NoFire]];
G2L["52"]["Name"] = [[Nofire]];
G2L["52"]["Position"] = UDim2.new(0.014, 0, 0.015, 0);


-- StarterGui.VoxlHubRL.test1.1.MainFrame.Nofire.Toggle
G2L["53"] = Instance.new("ImageLabel", G2L["52"]);
G2L["53"]["BorderSizePixel"] = 0;
G2L["53"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["53"]["ImageColor3"] = Color3.fromRGB(201, 201, 201);
G2L["53"]["Image"] = [[rbxassetid://16382316568]];
G2L["53"]["Size"] = UDim2.new(0, 37, 0, 22);
G2L["53"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["53"]["Name"] = [[Toggle]];
G2L["53"]["Position"] = UDim2.new(0.53234, 0, 0.222, 0);


-- StarterGui.VoxlHubRL.test1.1.MainFrame.Nofire.Toggle.UICorner
G2L["54"] = Instance.new("UICorner", G2L["53"]);
G2L["54"]["CornerRadius"] = UDim.new(1, 0);


-- StarterGui.VoxlHubRL.test1.1.MainFrame.Nofire.Toggle.Button
G2L["55"] = Instance.new("TextButton", G2L["53"]);
G2L["55"]["BorderSizePixel"] = 0;
G2L["55"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["55"]["TextSize"] = 14;
G2L["55"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["55"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["55"]["Size"] = UDim2.new(0, 98, 0, 39);
G2L["55"]["BackgroundTransparency"] = 1;
G2L["55"]["Name"] = [[Button]];
G2L["55"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["55"]["Text"] = [[]];
G2L["55"]["Position"] = UDim2.new(-1.41087, 0, -0.37651, 0);


-- StarterGui.VoxlHubRL.test1.1.MainFrame.Nofire.Toggle.Button.Script
G2L["56"] = Instance.new("LocalScript", G2L["55"]);
G2L["56"]["Name"] = [[Script]];


-- StarterGui.VoxlHubRL.test1.1.MainFrame.Nofire.Toggle.Circle
G2L["57"] = Instance.new("Frame", G2L["53"]);
G2L["57"]["BorderSizePixel"] = 0;
G2L["57"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["57"]["Size"] = UDim2.new(0, 18, 0, 18);
G2L["57"]["Position"] = UDim2.new(0.05, 0, 0, 2);
G2L["57"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["57"]["Name"] = [[Circle]];


-- StarterGui.VoxlHubRL.test1.1.MainFrame.Nofire.Toggle.Circle.UICorner
G2L["58"] = Instance.new("UICorner", G2L["57"]);
G2L["58"]["CornerRadius"] = UDim.new(1, 0);


-- StarterGui.VoxlHubRL.test1.1.MainFrame.Nofire.UICorner
G2L["59"] = Instance.new("UICorner", G2L["52"]);



-- StarterGui.VoxlHubRL.test1.1.MainFrame.NoInjuries
G2L["5a"] = Instance.new("TextLabel", G2L["48"]);
G2L["5a"]["BorderSizePixel"] = 0;
G2L["5a"]["TextSize"] = 14;
G2L["5a"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["5a"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["5a"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["5a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["5a"]["BackgroundTransparency"] = 0.65;
G2L["5a"]["Size"] = UDim2.new(0, 99, 0, 39);
G2L["5a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["5a"]["Text"] = [[]];
G2L["5a"]["Name"] = [[NoInjuries]];
G2L["5a"]["Position"] = UDim2.new(0.698, 0, 0.015, 0);


-- StarterGui.VoxlHubRL.test1.1.MainFrame.NoInjuries.Toggle
G2L["5b"] = Instance.new("ImageLabel", G2L["5a"]);
G2L["5b"]["BorderSizePixel"] = 0;
G2L["5b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["5b"]["ImageColor3"] = Color3.fromRGB(201, 201, 201);
G2L["5b"]["Image"] = [[rbxassetid://16382316568]];
G2L["5b"]["Size"] = UDim2.new(0, 37, 0, 22);
G2L["5b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["5b"]["Name"] = [[Toggle]];
G2L["5b"]["Position"] = UDim2.new(0.53234, 0, 0.222, 0);


-- StarterGui.VoxlHubRL.test1.1.MainFrame.NoInjuries.Toggle.UICorner
G2L["5c"] = Instance.new("UICorner", G2L["5b"]);
G2L["5c"]["CornerRadius"] = UDim.new(1, 0);


-- StarterGui.VoxlHubRL.test1.1.MainFrame.NoInjuries.Toggle.Button
G2L["5d"] = Instance.new("TextButton", G2L["5b"]);
G2L["5d"]["BorderSizePixel"] = 0;
G2L["5d"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["5d"]["TextSize"] = 14;
G2L["5d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["5d"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["5d"]["Size"] = UDim2.new(0, 98, 0, 39);
G2L["5d"]["BackgroundTransparency"] = 1;
G2L["5d"]["Name"] = [[Button]];
G2L["5d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["5d"]["Text"] = [[]];
G2L["5d"]["Position"] = UDim2.new(-1.41087, 0, -0.37651, 0);


-- StarterGui.VoxlHubRL.test1.1.MainFrame.NoInjuries.Toggle.Button.Script
G2L["5e"] = Instance.new("LocalScript", G2L["5d"]);
G2L["5e"]["Name"] = [[Script]];


-- StarterGui.VoxlHubRL.test1.1.MainFrame.NoInjuries.Toggle.Circle
G2L["5f"] = Instance.new("Frame", G2L["5b"]);
G2L["5f"]["BorderSizePixel"] = 0;
G2L["5f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["5f"]["Size"] = UDim2.new(0, 18, 0, 18);
G2L["5f"]["Position"] = UDim2.new(0.05, 0, 0, 2);
G2L["5f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["5f"]["Name"] = [[Circle]];


-- StarterGui.VoxlHubRL.test1.1.MainFrame.NoInjuries.Toggle.Circle.UICorner
G2L["60"] = Instance.new("UICorner", G2L["5f"]);
G2L["60"]["CornerRadius"] = UDim.new(1, 0);


-- StarterGui.VoxlHubRL.test1.1.MainFrame.NoInjuries.UICorner
G2L["61"] = Instance.new("UICorner", G2L["5a"]);



-- StarterGui.VoxlHubRL.test1.1.MainFrame.NoInjuries.Text
G2L["62"] = Instance.new("TextLabel", G2L["5a"]);
G2L["62"]["TextWrapped"] = true;
G2L["62"]["BorderSizePixel"] = 0;
G2L["62"]["TextSize"] = 14;
G2L["62"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["62"]["TextDirection"] = Enum.TextDirection.LeftToRight;
G2L["62"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["62"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["62"]["BackgroundTransparency"] = 1;
G2L["62"]["Size"] = UDim2.new(0, 44, 0, 28);
G2L["62"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["62"]["Text"] = [[Part]];
G2L["62"]["Name"] = [[Text]];
G2L["62"]["Position"] = UDim2.new(0.099, 0, 0.378, 0);


-- StarterGui.VoxlHubRL.test1.1.MainFrame.NoInjuries.Text
G2L["63"] = Instance.new("TextLabel", G2L["5a"]);
G2L["63"]["BorderSizePixel"] = 0;
G2L["63"]["TextSize"] = 14;
G2L["63"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["63"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["63"]["TextDirection"] = Enum.TextDirection.LeftToRight;
G2L["63"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["63"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["63"]["BackgroundTransparency"] = 1;
G2L["63"]["Size"] = UDim2.new(0, 44, 0, 28);
G2L["63"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["63"]["Text"] = [[No Injury]];
G2L["63"]["Name"] = [[Text]];
G2L["63"]["Position"] = UDim2.new(0.06, 0, -0.004, 0);


-- StarterGui.VoxlHubRL.test1.1.MainFrame.NoOrderField
G2L["64"] = Instance.new("TextLabel", G2L["48"]);
G2L["64"]["BorderSizePixel"] = 0;
G2L["64"]["TextSize"] = 14;
G2L["64"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["64"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["64"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["64"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["64"]["BackgroundTransparency"] = 0.65;
G2L["64"]["Size"] = UDim2.new(0, 99, 0, 39);
G2L["64"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["64"]["Text"] = [[]];
G2L["64"]["Name"] = [[NoOrderField]];
G2L["64"]["Position"] = UDim2.new(0.014, 0, 0.085, 0);


-- StarterGui.VoxlHubRL.test1.1.MainFrame.NoOrderField.Toggle
G2L["65"] = Instance.new("ImageLabel", G2L["64"]);
G2L["65"]["BorderSizePixel"] = 0;
G2L["65"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["65"]["ImageColor3"] = Color3.fromRGB(201, 201, 201);
G2L["65"]["Image"] = [[rbxassetid://16382316568]];
G2L["65"]["Size"] = UDim2.new(0, 37, 0, 22);
G2L["65"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["65"]["Name"] = [[Toggle]];
G2L["65"]["Position"] = UDim2.new(0.53234, 0, 0.222, 0);


-- StarterGui.VoxlHubRL.test1.1.MainFrame.NoOrderField.Toggle.UICorner
G2L["66"] = Instance.new("UICorner", G2L["65"]);
G2L["66"]["CornerRadius"] = UDim.new(1, 0);


-- StarterGui.VoxlHubRL.test1.1.MainFrame.NoOrderField.Toggle.Button
G2L["67"] = Instance.new("TextButton", G2L["65"]);
G2L["67"]["BorderSizePixel"] = 0;
G2L["67"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["67"]["TextSize"] = 14;
G2L["67"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["67"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["67"]["Size"] = UDim2.new(0, 98, 0, 39);
G2L["67"]["BackgroundTransparency"] = 1;
G2L["67"]["Name"] = [[Button]];
G2L["67"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["67"]["Text"] = [[]];
G2L["67"]["Position"] = UDim2.new(-1.41087, 0, -0.37651, 0);


-- StarterGui.VoxlHubRL.test1.1.MainFrame.NoOrderField.Toggle.Button.Script
G2L["68"] = Instance.new("LocalScript", G2L["67"]);
G2L["68"]["Name"] = [[Script]];


-- StarterGui.VoxlHubRL.test1.1.MainFrame.NoOrderField.Toggle.Circle
G2L["69"] = Instance.new("Frame", G2L["65"]);
G2L["69"]["BorderSizePixel"] = 0;
G2L["69"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["69"]["Size"] = UDim2.new(0, 18, 0, 18);
G2L["69"]["Position"] = UDim2.new(0.05, 0, 0, 2);
G2L["69"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["69"]["Name"] = [[Circle]];


-- StarterGui.VoxlHubRL.test1.1.MainFrame.NoOrderField.Toggle.Circle.UICorner
G2L["6a"] = Instance.new("UICorner", G2L["69"]);
G2L["6a"]["CornerRadius"] = UDim.new(1, 0);


-- StarterGui.VoxlHubRL.test1.1.MainFrame.NoOrderField.UICorner
G2L["6b"] = Instance.new("UICorner", G2L["64"]);



-- StarterGui.VoxlHubRL.test1.1.MainFrame.NoOrderField.Text
G2L["6c"] = Instance.new("TextLabel", G2L["64"]);
G2L["6c"]["BorderSizePixel"] = 0;
G2L["6c"]["TextSize"] = 14;
G2L["6c"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["6c"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["6c"]["TextDirection"] = Enum.TextDirection.LeftToRight;
G2L["6c"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["6c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["6c"]["BackgroundTransparency"] = 1;
G2L["6c"]["Size"] = UDim2.new(0, 44, 0, 28);
G2L["6c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["6c"]["Text"] = [[No Order]];
G2L["6c"]["Name"] = [[Text]];
G2L["6c"]["Position"] = UDim2.new(0.058, 0, 0.01, 0);


-- StarterGui.VoxlHubRL.test1.1.MainFrame.NoOrderField.Text
G2L["6d"] = Instance.new("TextLabel", G2L["64"]);
G2L["6d"]["BorderSizePixel"] = 0;
G2L["6d"]["TextSize"] = 14;
G2L["6d"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["6d"]["TextDirection"] = Enum.TextDirection.LeftToRight;
G2L["6d"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["6d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["6d"]["BackgroundTransparency"] = 1;
G2L["6d"]["Size"] = UDim2.new(0, 44, 0, 28);
G2L["6d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["6d"]["Text"] = [[Field]];
G2L["6d"]["Name"] = [[Text]];
G2L["6d"]["Position"] = UDim2.new(0.058, 0, 0.4, 0);


-- StarterGui.VoxlHubRL.test1.1.PlayerFrame
G2L["6e"] = Instance.new("ScrollingFrame", G2L["2"]);
G2L["6e"]["Visible"] = false;
G2L["6e"]["Active"] = true;
G2L["6e"]["BorderSizePixel"] = 0;
G2L["6e"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["6e"]["Name"] = [[PlayerFrame]];
G2L["6e"]["Size"] = UDim2.new(0, 339, 0, 263);
G2L["6e"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["6e"]["Position"] = UDim2.new(0.22667, 0, 0.17231, 0);
G2L["6e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["6e"]["ScrollBarThickness"] = 2;
G2L["6e"]["BackgroundTransparency"] = 0.5;


-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.UICorner
G2L["6f"] = Instance.new("UICorner", G2L["6e"]);



-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.MaxHealer
G2L["70"] = Instance.new("TextLabel", G2L["6e"]);
G2L["70"]["BorderSizePixel"] = 0;
G2L["70"]["TextSize"] = 14;
G2L["70"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["70"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["70"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["70"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["70"]["BackgroundTransparency"] = 0.65;
G2L["70"]["Size"] = UDim2.new(0, 99, 0, 39);
G2L["70"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["70"]["Text"] = [[     Healer]];
G2L["70"]["Name"] = [[MaxHealer]];
G2L["70"]["Position"] = UDim2.new(0.014, 0, 0.015, 0);


-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.MaxHealer.Toggle
G2L["71"] = Instance.new("ImageLabel", G2L["70"]);
G2L["71"]["BorderSizePixel"] = 0;
G2L["71"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["71"]["ImageColor3"] = Color3.fromRGB(201, 201, 201);
G2L["71"]["Image"] = [[rbxassetid://16382316568]];
G2L["71"]["Size"] = UDim2.new(0, 37, 0, 22);
G2L["71"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["71"]["Name"] = [[Toggle]];
G2L["71"]["Position"] = UDim2.new(0.53234, 0, 0.222, 0);


-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.MaxHealer.Toggle.UICorner
G2L["72"] = Instance.new("UICorner", G2L["71"]);
G2L["72"]["CornerRadius"] = UDim.new(1, 0);


-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.MaxHealer.Toggle.Button
G2L["73"] = Instance.new("TextButton", G2L["71"]);
G2L["73"]["BorderSizePixel"] = 0;
G2L["73"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["73"]["TextSize"] = 14;
G2L["73"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["73"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["73"]["Size"] = UDim2.new(0, 98, 0, 39);
G2L["73"]["BackgroundTransparency"] = 1;
G2L["73"]["Name"] = [[Button]];
G2L["73"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["73"]["Text"] = [[]];
G2L["73"]["Position"] = UDim2.new(-1.41087, 0, -0.37651, 0);


-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.MaxHealer.Toggle.Button.Script
G2L["74"] = Instance.new("LocalScript", G2L["73"]);
G2L["74"]["Name"] = [[Script]];


-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.MaxHealer.Toggle.Circle
G2L["75"] = Instance.new("Frame", G2L["71"]);
G2L["75"]["BorderSizePixel"] = 0;
G2L["75"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["75"]["Size"] = UDim2.new(0, 18, 0, 18);
G2L["75"]["Position"] = UDim2.new(0.05, 0, 0, 2);
G2L["75"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["75"]["Name"] = [[Circle]];


-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.MaxHealer.Toggle.Circle.UICorner
G2L["76"] = Instance.new("UICorner", G2L["75"]);
G2L["76"]["CornerRadius"] = UDim.new(1, 0);


-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.MaxHealer.UICorner
G2L["77"] = Instance.new("UICorner", G2L["70"]);



-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.WorldPulse
G2L["78"] = Instance.new("TextLabel", G2L["6e"]);
G2L["78"]["TextWrapped"] = true;
G2L["78"]["BorderSizePixel"] = 0;
G2L["78"]["TextSize"] = 14;
G2L["78"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["78"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["78"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["78"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["78"]["BackgroundTransparency"] = 0.65;
G2L["78"]["RichText"] = true;
G2L["78"]["Size"] = UDim2.new(0, 99, 0, 39);
G2L["78"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["78"]["Text"] = [[]];
G2L["78"]["Name"] = [[WorldPulse]];
G2L["78"]["Position"] = UDim2.new(0.356, 0, 0.015, 0);


-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.WorldPulse.Toggle
G2L["79"] = Instance.new("ImageLabel", G2L["78"]);
G2L["79"]["BorderSizePixel"] = 0;
G2L["79"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["79"]["ImageColor3"] = Color3.fromRGB(201, 201, 201);
G2L["79"]["Image"] = [[rbxassetid://16382316568]];
G2L["79"]["Size"] = UDim2.new(0, 37, 0, 22);
G2L["79"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["79"]["Name"] = [[Toggle]];
G2L["79"]["Position"] = UDim2.new(0.53234, 0, 0.222, 0);


-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.WorldPulse.Toggle.UICorner
G2L["7a"] = Instance.new("UICorner", G2L["79"]);
G2L["7a"]["CornerRadius"] = UDim.new(1, 0);


-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.WorldPulse.Toggle.Button
G2L["7b"] = Instance.new("TextButton", G2L["79"]);
G2L["7b"]["BorderSizePixel"] = 0;
G2L["7b"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["7b"]["TextSize"] = 14;
G2L["7b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["7b"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["7b"]["Size"] = UDim2.new(0, 98, 0, 39);
G2L["7b"]["BackgroundTransparency"] = 1;
G2L["7b"]["Name"] = [[Button]];
G2L["7b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["7b"]["Text"] = [[]];
G2L["7b"]["Position"] = UDim2.new(-1.41087, 0, -0.37651, 0);


-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.WorldPulse.Toggle.Button.Script
G2L["7c"] = Instance.new("LocalScript", G2L["7b"]);
G2L["7c"]["Name"] = [[Script]];


-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.WorldPulse.Toggle.Circle
G2L["7d"] = Instance.new("Frame", G2L["79"]);
G2L["7d"]["BorderSizePixel"] = 0;
G2L["7d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["7d"]["Size"] = UDim2.new(0, 18, 0, 18);
G2L["7d"]["Position"] = UDim2.new(0.05, 0, 0, 2);
G2L["7d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["7d"]["Name"] = [[Circle]];


-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.WorldPulse.Toggle.Circle.UICorner
G2L["7e"] = Instance.new("UICorner", G2L["7d"]);
G2L["7e"]["CornerRadius"] = UDim.new(1, 0);


-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.WorldPulse.UICorner
G2L["7f"] = Instance.new("UICorner", G2L["78"]);



-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.WorldPulse.Text
G2L["80"] = Instance.new("TextLabel", G2L["78"]);
G2L["80"]["TextWrapped"] = true;
G2L["80"]["BorderSizePixel"] = 0;
G2L["80"]["TextSize"] = 14;
G2L["80"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["80"]["TextDirection"] = Enum.TextDirection.LeftToRight;
G2L["80"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["80"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["80"]["BackgroundTransparency"] = 1;
G2L["80"]["Size"] = UDim2.new(0, 46, 0, 28);
G2L["80"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["80"]["Text"] = [[World  Pulse]];
G2L["80"]["Name"] = [[Text]];
G2L["80"]["Position"] = UDim2.new(0.05819, 0, 0.1241, 0);


-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.Intent
G2L["81"] = Instance.new("TextLabel", G2L["6e"]);
G2L["81"]["TextWrapped"] = true;
G2L["81"]["BorderSizePixel"] = 0;
G2L["81"]["TextSize"] = 14;
G2L["81"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["81"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["81"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["81"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["81"]["BackgroundTransparency"] = 0.65;
G2L["81"]["RichText"] = true;
G2L["81"]["Size"] = UDim2.new(0, 99, 0, 39);
G2L["81"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["81"]["Text"] = [[]];
G2L["81"]["Name"] = [[Intent]];
G2L["81"]["Position"] = UDim2.new(0.698, 0, 0.015, 0);


-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.Intent.Toggle
G2L["82"] = Instance.new("ImageLabel", G2L["81"]);
G2L["82"]["BorderSizePixel"] = 0;
G2L["82"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["82"]["ImageColor3"] = Color3.fromRGB(201, 201, 201);
G2L["82"]["Image"] = [[rbxassetid://16382316568]];
G2L["82"]["Size"] = UDim2.new(0, 37, 0, 22);
G2L["82"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["82"]["Name"] = [[Toggle]];
G2L["82"]["Position"] = UDim2.new(0.53234, 0, 0.222, 0);


-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.Intent.Toggle.UICorner
G2L["83"] = Instance.new("UICorner", G2L["82"]);
G2L["83"]["CornerRadius"] = UDim.new(1, 0);


-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.Intent.Toggle.Button
G2L["84"] = Instance.new("TextButton", G2L["82"]);
G2L["84"]["BorderSizePixel"] = 0;
G2L["84"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["84"]["TextSize"] = 14;
G2L["84"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["84"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["84"]["Size"] = UDim2.new(0, 98, 0, 39);
G2L["84"]["BackgroundTransparency"] = 1;
G2L["84"]["Name"] = [[Button]];
G2L["84"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["84"]["Text"] = [[]];
G2L["84"]["Position"] = UDim2.new(-1.41087, 0, -0.37651, 0);


-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.Intent.Toggle.Button.Script
G2L["85"] = Instance.new("LocalScript", G2L["84"]);
G2L["85"]["Name"] = [[Script]];


-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.Intent.Toggle.Circle
G2L["86"] = Instance.new("Frame", G2L["82"]);
G2L["86"]["BorderSizePixel"] = 0;
G2L["86"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["86"]["Size"] = UDim2.new(0, 18, 0, 18);
G2L["86"]["Position"] = UDim2.new(0.05, 0, 0, 2);
G2L["86"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["86"]["Name"] = [[Circle]];


-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.Intent.Toggle.Circle.UICorner
G2L["87"] = Instance.new("UICorner", G2L["86"]);
G2L["87"]["CornerRadius"] = UDim.new(1, 0);


-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.Intent.UICorner
G2L["88"] = Instance.new("UICorner", G2L["81"]);



-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.Intent.Text
G2L["89"] = Instance.new("TextLabel", G2L["81"]);
G2L["89"]["TextWrapped"] = true;
G2L["89"]["BorderSizePixel"] = 0;
G2L["89"]["TextSize"] = 14;
G2L["89"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["89"]["TextDirection"] = Enum.TextDirection.LeftToRight;
G2L["89"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["89"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["89"]["BackgroundTransparency"] = 1;
G2L["89"]["Size"] = UDim2.new(0, 46, 0, 28);
G2L["89"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["89"]["Text"] = [[Intent]];
G2L["89"]["Name"] = [[Text]];
G2L["89"]["Position"] = UDim2.new(0.05, 0, 0.124, 0);


-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.NoPommel
G2L["8a"] = Instance.new("TextLabel", G2L["6e"]);
G2L["8a"]["TextWrapped"] = true;
G2L["8a"]["BorderSizePixel"] = 0;
G2L["8a"]["TextSize"] = 14;
G2L["8a"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["8a"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["8a"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["8a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["8a"]["BackgroundTransparency"] = 0.65;
G2L["8a"]["RichText"] = true;
G2L["8a"]["Size"] = UDim2.new(0, 99, 0, 39);
G2L["8a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["8a"]["Text"] = [[]];
G2L["8a"]["Name"] = [[NoPommel]];
G2L["8a"]["Position"] = UDim2.new(0.014, 0, 0.085, 0);


-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.NoPommel.Toggle
G2L["8b"] = Instance.new("ImageLabel", G2L["8a"]);
G2L["8b"]["BorderSizePixel"] = 0;
G2L["8b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["8b"]["ImageColor3"] = Color3.fromRGB(201, 201, 201);
G2L["8b"]["Image"] = [[rbxassetid://16382316568]];
G2L["8b"]["Size"] = UDim2.new(0, 37, 0, 22);
G2L["8b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["8b"]["Name"] = [[Toggle]];
G2L["8b"]["Position"] = UDim2.new(0.53234, 0, 0.222, 0);


-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.NoPommel.Toggle.UICorner
G2L["8c"] = Instance.new("UICorner", G2L["8b"]);
G2L["8c"]["CornerRadius"] = UDim.new(1, 0);


-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.NoPommel.Toggle.Button
G2L["8d"] = Instance.new("TextButton", G2L["8b"]);
G2L["8d"]["BorderSizePixel"] = 0;
G2L["8d"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["8d"]["TextSize"] = 14;
G2L["8d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["8d"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["8d"]["Size"] = UDim2.new(0, 98, 0, 39);
G2L["8d"]["BackgroundTransparency"] = 1;
G2L["8d"]["Name"] = [[Button]];
G2L["8d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["8d"]["Text"] = [[]];
G2L["8d"]["Position"] = UDim2.new(-1.41087, 0, -0.37651, 0);


-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.NoPommel.Toggle.Button.Script
G2L["8e"] = Instance.new("LocalScript", G2L["8d"]);
G2L["8e"]["Name"] = [[Script]];


-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.NoPommel.Toggle.Circle
G2L["8f"] = Instance.new("Frame", G2L["8b"]);
G2L["8f"]["BorderSizePixel"] = 0;
G2L["8f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["8f"]["Size"] = UDim2.new(0, 18, 0, 18);
G2L["8f"]["Position"] = UDim2.new(0.05, 0, 0, 2);
G2L["8f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["8f"]["Name"] = [[Circle]];


-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.NoPommel.Toggle.Circle.UICorner
G2L["90"] = Instance.new("UICorner", G2L["8f"]);
G2L["90"]["CornerRadius"] = UDim.new(1, 0);


-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.NoPommel.UICorner
G2L["91"] = Instance.new("UICorner", G2L["8a"]);



-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.NoPommel.Text
G2L["92"] = Instance.new("TextLabel", G2L["8a"]);
G2L["92"]["TextWrapped"] = true;
G2L["92"]["BorderSizePixel"] = 0;
G2L["92"]["TextSize"] = 14;
G2L["92"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["92"]["TextDirection"] = Enum.TextDirection.LeftToRight;
G2L["92"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["92"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["92"]["BackgroundTransparency"] = 1;
G2L["92"]["Size"] = UDim2.new(0, 46, 0, 28);
G2L["92"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["92"]["Text"] = [[Anti Pommel]];
G2L["92"]["Name"] = [[Text]];
G2L["92"]["Position"] = UDim2.new(0.05, 0, 0.124, 0);


-- StarterGui.VoxlHubRL.test1.1.CombatFrame
G2L["93"] = Instance.new("ScrollingFrame", G2L["2"]);
G2L["93"]["Visible"] = false;
G2L["93"]["Active"] = true;
G2L["93"]["BorderSizePixel"] = 0;
G2L["93"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["93"]["Name"] = [[CombatFrame]];
G2L["93"]["Size"] = UDim2.new(0, 339, 0, 263);
G2L["93"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["93"]["Position"] = UDim2.new(0.22667, 0, 0.17231, 0);
G2L["93"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["93"]["ScrollBarThickness"] = 2;
G2L["93"]["BackgroundTransparency"] = 0.5;


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.UICorner
G2L["94"] = Instance.new("UICorner", G2L["93"]);



-- StarterGui.VoxlHubRL.test1.1.CombatFrame.AimbotGrapple
G2L["95"] = Instance.new("TextLabel", G2L["93"]);
G2L["95"]["TextWrapped"] = true;
G2L["95"]["BorderSizePixel"] = 0;
G2L["95"]["TextSize"] = 14;
G2L["95"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["95"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["95"]["TextDirection"] = Enum.TextDirection.LeftToRight;
G2L["95"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["95"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["95"]["BackgroundTransparency"] = 0.65;
G2L["95"]["Size"] = UDim2.new(0, 99, 0, 39);
G2L["95"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["95"]["Text"] = [[]];
G2L["95"]["Name"] = [[AimbotGrapple]];
G2L["95"]["Position"] = UDim2.new(0.014, 0, 0.085, 0);


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.AimbotGrapple.Toggle
G2L["96"] = Instance.new("ImageLabel", G2L["95"]);
G2L["96"]["BorderSizePixel"] = 0;
G2L["96"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["96"]["ImageColor3"] = Color3.fromRGB(201, 201, 201);
G2L["96"]["Image"] = [[rbxassetid://16382316568]];
G2L["96"]["Size"] = UDim2.new(0, 37, 0, 22);
G2L["96"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["96"]["Name"] = [[Toggle]];
G2L["96"]["Position"] = UDim2.new(0.53234, 0, 0.222, 0);


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.AimbotGrapple.Toggle.UICorner
G2L["97"] = Instance.new("UICorner", G2L["96"]);
G2L["97"]["CornerRadius"] = UDim.new(1, 0);


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.AimbotGrapple.Toggle.Button
G2L["98"] = Instance.new("TextButton", G2L["96"]);
G2L["98"]["BorderSizePixel"] = 0;
G2L["98"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["98"]["TextSize"] = 14;
G2L["98"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["98"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["98"]["Size"] = UDim2.new(0, 98, 0, 39);
G2L["98"]["BackgroundTransparency"] = 1;
G2L["98"]["Name"] = [[Button]];
G2L["98"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["98"]["Text"] = [[]];
G2L["98"]["Position"] = UDim2.new(-1.41087, 0, -0.37651, 0);


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.AimbotGrapple.Toggle.Button.oLDONE
G2L["99"] = Instance.new("LocalScript", G2L["98"]);
G2L["99"]["Enabled"] = false;
G2L["99"]["Name"] = [[oLDONE]];
G2L["99"]["Disabled"] = true;


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.AimbotGrapple.Toggle.Button.newoneWORKED
G2L["9a"] = Instance.new("LocalScript", G2L["98"]);
G2L["9a"]["Name"] = [[newoneWORKED]];


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.AimbotGrapple.Toggle.Circle
G2L["9b"] = Instance.new("Frame", G2L["96"]);
G2L["9b"]["BorderSizePixel"] = 0;
G2L["9b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["9b"]["Size"] = UDim2.new(0, 18, 0, 18);
G2L["9b"]["Position"] = UDim2.new(0.05, 0, 0, 2);
G2L["9b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["9b"]["Name"] = [[Circle]];


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.AimbotGrapple.Toggle.Circle.UICorner
G2L["9c"] = Instance.new("UICorner", G2L["9b"]);
G2L["9c"]["CornerRadius"] = UDim.new(1, 0);


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.AimbotGrapple.UICorner
G2L["9d"] = Instance.new("UICorner", G2L["95"]);



-- StarterGui.VoxlHubRL.test1.1.CombatFrame.AimbotGrapple.Text
G2L["9e"] = Instance.new("TextLabel", G2L["95"]);
G2L["9e"]["TextWrapped"] = true;
G2L["9e"]["BorderSizePixel"] = 0;
G2L["9e"]["TextSize"] = 14;
G2L["9e"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["9e"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["9e"]["TextDirection"] = Enum.TextDirection.LeftToRight;
G2L["9e"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["9e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["9e"]["BackgroundTransparency"] = 1;
G2L["9e"]["Size"] = UDim2.new(0, 44, 0, 28);
G2L["9e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["9e"]["Text"] = [[Aimbot]];
G2L["9e"]["Name"] = [[Text]];
G2L["9e"]["Position"] = UDim2.new(0.11, 0, -0.004, 0);


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.AimbotGrapple.Text
G2L["9f"] = Instance.new("TextLabel", G2L["95"]);
G2L["9f"]["TextWrapped"] = true;
G2L["9f"]["BorderSizePixel"] = 0;
G2L["9f"]["TextSize"] = 14;
G2L["9f"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["9f"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["9f"]["TextDirection"] = Enum.TextDirection.LeftToRight;
G2L["9f"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["9f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["9f"]["BackgroundTransparency"] = 1;
G2L["9f"]["Size"] = UDim2.new(0, 44, 0, 28);
G2L["9f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["9f"]["Text"] = [[Grapple]];
G2L["9f"]["Name"] = [[Text]];
G2L["9f"]["Position"] = UDim2.new(0.09859, 0, 0.27795, 0);


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.AimbotGrapple.Slider
G2L["a0"] = Instance.new("Frame", G2L["95"]);
G2L["a0"]["BorderSizePixel"] = 0;
G2L["a0"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a0"]["Size"] = UDim2.new(0, 100, 0, 9);
G2L["a0"]["Position"] = UDim2.new(0, 0, 1.15385, 0);
G2L["a0"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a0"]["Name"] = [[Slider]];
G2L["a0"]["BackgroundTransparency"] = 0.65;


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.AimbotGrapple.Slider.Updater
G2L["a1"] = Instance.new("LocalScript", G2L["a0"]);
G2L["a1"]["Enabled"] = false;
G2L["a1"]["Name"] = [[Updater]];
G2L["a1"]["Disabled"] = true;


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.AimbotGrapple.Slider.Fill
G2L["a2"] = Instance.new("Frame", G2L["a0"]);
G2L["a2"]["BorderSizePixel"] = 0;
G2L["a2"]["BackgroundColor3"] = Color3.fromRGB(201, 201, 201);
G2L["a2"]["Size"] = UDim2.new(0, 54, 0, 9);
G2L["a2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a2"]["Name"] = [[Fill]];


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.AimbotGrapple.Slider.Fill.UICorner
G2L["a3"] = Instance.new("UICorner", G2L["a2"]);



-- StarterGui.VoxlHubRL.test1.1.CombatFrame.AimbotGrapple.Slider.Trigger
G2L["a4"] = Instance.new("TextButton", G2L["a0"]);
G2L["a4"]["BorderSizePixel"] = 0;
G2L["a4"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a4"]["TextSize"] = 14;
G2L["a4"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a4"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["a4"]["Size"] = UDim2.new(0, 99, 0, 9);
G2L["a4"]["BackgroundTransparency"] = 1;
G2L["a4"]["Name"] = [[Trigger]];
G2L["a4"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a4"]["Text"] = [[]];


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.AimbotGrapple.Slider.OutputValue
G2L["a5"] = Instance.new("IntValue", G2L["a0"]);
G2L["a5"]["Name"] = [[OutputValue]];


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.AimbotGrapple.Slider.Label
G2L["a6"] = Instance.new("TextLabel", G2L["a0"]);
G2L["a6"]["BorderSizePixel"] = 0;
G2L["a6"]["TextSize"] = 12;
G2L["a6"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a6"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["a6"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a6"]["BackgroundTransparency"] = 1;
G2L["a6"]["Size"] = UDim2.new(0, 99, 0, 9);
G2L["a6"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a6"]["Text"] = [[Fov]];
G2L["a6"]["Name"] = [[Label]];


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.AimbotGrapple.Slider.UICorner
G2L["a7"] = Instance.new("UICorner", G2L["a0"]);



-- StarterGui.VoxlHubRL.test1.1.CombatFrame.Autobard
G2L["a8"] = Instance.new("TextLabel", G2L["93"]);
G2L["a8"]["TextWrapped"] = true;
G2L["a8"]["BorderSizePixel"] = 0;
G2L["a8"]["TextSize"] = 14;
G2L["a8"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["a8"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a8"]["TextDirection"] = Enum.TextDirection.LeftToRight;
G2L["a8"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["a8"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a8"]["BackgroundTransparency"] = 0.65;
G2L["a8"]["Size"] = UDim2.new(0, 99, 0, 39);
G2L["a8"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a8"]["Text"] = [[]];
G2L["a8"]["Name"] = [[Autobard]];
G2L["a8"]["Position"] = UDim2.new(0.356, 0, 0.015, 0);


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.Autobard.Toggle
G2L["a9"] = Instance.new("ImageLabel", G2L["a8"]);
G2L["a9"]["BorderSizePixel"] = 0;
G2L["a9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a9"]["ImageColor3"] = Color3.fromRGB(201, 201, 201);
G2L["a9"]["Image"] = [[rbxassetid://16382316568]];
G2L["a9"]["Size"] = UDim2.new(0, 37, 0, 22);
G2L["a9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a9"]["Name"] = [[Toggle]];
G2L["a9"]["Position"] = UDim2.new(0.53234, 0, 0.222, 0);


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.Autobard.Toggle.UICorner
G2L["aa"] = Instance.new("UICorner", G2L["a9"]);
G2L["aa"]["CornerRadius"] = UDim.new(1, 0);


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.Autobard.Toggle.Button
G2L["ab"] = Instance.new("TextButton", G2L["a9"]);
G2L["ab"]["BorderSizePixel"] = 0;
G2L["ab"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ab"]["TextSize"] = 14;
G2L["ab"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["ab"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["ab"]["Size"] = UDim2.new(0, 98, 0, 39);
G2L["ab"]["BackgroundTransparency"] = 1;
G2L["ab"]["Name"] = [[Button]];
G2L["ab"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ab"]["Text"] = [[]];
G2L["ab"]["Position"] = UDim2.new(-1.41087, 0, -0.37651, 0);


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.Autobard.Toggle.Button.Script
G2L["ac"] = Instance.new("LocalScript", G2L["ab"]);
G2L["ac"]["Name"] = [[Script]];


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.Autobard.Toggle.Circle
G2L["ad"] = Instance.new("Frame", G2L["a9"]);
G2L["ad"]["BorderSizePixel"] = 0;
G2L["ad"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["ad"]["Size"] = UDim2.new(0, 18, 0, 18);
G2L["ad"]["Position"] = UDim2.new(0.05, 0, 0, 2);
G2L["ad"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ad"]["Name"] = [[Circle]];


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.Autobard.Toggle.Circle.UICorner
G2L["ae"] = Instance.new("UICorner", G2L["ad"]);
G2L["ae"]["CornerRadius"] = UDim.new(1, 0);


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.Autobard.UICorner
G2L["af"] = Instance.new("UICorner", G2L["a8"]);



-- StarterGui.VoxlHubRL.test1.1.CombatFrame.Autobard.Text
G2L["b0"] = Instance.new("TextLabel", G2L["a8"]);
G2L["b0"]["TextWrapped"] = true;
G2L["b0"]["BorderSizePixel"] = 0;
G2L["b0"]["TextSize"] = 14;
G2L["b0"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["b0"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b0"]["TextDirection"] = Enum.TextDirection.LeftToRight;
G2L["b0"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["b0"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b0"]["BackgroundTransparency"] = 1;
G2L["b0"]["Size"] = UDim2.new(0, 32, 0, 28);
G2L["b0"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b0"]["Text"] = [[Auto Bard]];
G2L["b0"]["Name"] = [[Text]];
G2L["b0"]["Position"] = UDim2.new(0.13899, 0, 0.1241, 0);


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.BardStacking
G2L["b1"] = Instance.new("TextLabel", G2L["93"]);
G2L["b1"]["TextWrapped"] = true;
G2L["b1"]["BorderSizePixel"] = 0;
G2L["b1"]["TextSize"] = 14;
G2L["b1"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["b1"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b1"]["TextDirection"] = Enum.TextDirection.LeftToRight;
G2L["b1"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["b1"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b1"]["BackgroundTransparency"] = 0.65;
G2L["b1"]["Size"] = UDim2.new(0, 99, 0, 39);
G2L["b1"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b1"]["Text"] = [[]];
G2L["b1"]["Name"] = [[BardStacking]];
G2L["b1"]["Position"] = UDim2.new(0.356, 0, 0.085, 0);


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.BardStacking.Toggle
G2L["b2"] = Instance.new("ImageLabel", G2L["b1"]);
G2L["b2"]["BorderSizePixel"] = 0;
G2L["b2"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b2"]["ImageColor3"] = Color3.fromRGB(201, 201, 201);
G2L["b2"]["Image"] = [[rbxassetid://16382316568]];
G2L["b2"]["Size"] = UDim2.new(0, 37, 0, 22);
G2L["b2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b2"]["Name"] = [[Toggle]];
G2L["b2"]["Position"] = UDim2.new(0.53234, 0, 0.222, 0);


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.BardStacking.Toggle.UICorner
G2L["b3"] = Instance.new("UICorner", G2L["b2"]);
G2L["b3"]["CornerRadius"] = UDim.new(1, 0);


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.BardStacking.Toggle.Button
G2L["b4"] = Instance.new("TextButton", G2L["b2"]);
G2L["b4"]["BorderSizePixel"] = 0;
G2L["b4"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b4"]["TextSize"] = 14;
G2L["b4"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b4"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["b4"]["Size"] = UDim2.new(0, 98, 0, 39);
G2L["b4"]["BackgroundTransparency"] = 1;
G2L["b4"]["Name"] = [[Button]];
G2L["b4"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b4"]["Text"] = [[]];
G2L["b4"]["Position"] = UDim2.new(-1.41087, 0, -0.37651, 0);


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.BardStacking.Toggle.Button.Script
G2L["b5"] = Instance.new("LocalScript", G2L["b4"]);
G2L["b5"]["Name"] = [[Script]];


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.BardStacking.Toggle.Circle
G2L["b6"] = Instance.new("Frame", G2L["b2"]);
G2L["b6"]["BorderSizePixel"] = 0;
G2L["b6"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b6"]["Size"] = UDim2.new(0, 18, 0, 18);
G2L["b6"]["Position"] = UDim2.new(0.05, 0, 0, 2);
G2L["b6"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b6"]["Name"] = [[Circle]];


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.BardStacking.Toggle.Circle.UICorner
G2L["b7"] = Instance.new("UICorner", G2L["b6"]);
G2L["b7"]["CornerRadius"] = UDim.new(1, 0);


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.BardStacking.UICorner
G2L["b8"] = Instance.new("UICorner", G2L["b1"]);



-- StarterGui.VoxlHubRL.test1.1.CombatFrame.BardStacking.Text
G2L["b9"] = Instance.new("TextLabel", G2L["b1"]);
G2L["b9"]["TextWrapped"] = true;
G2L["b9"]["BorderSizePixel"] = 0;
G2L["b9"]["TextSize"] = 14;
G2L["b9"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["b9"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b9"]["TextDirection"] = Enum.TextDirection.LeftToRight;
G2L["b9"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["b9"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b9"]["BackgroundTransparency"] = 1;
G2L["b9"]["Size"] = UDim2.new(0, 46, 0, 28);
G2L["b9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b9"]["Text"] = [[     Bard Stacking]];
G2L["b9"]["Name"] = [[Text]];
G2L["b9"]["Position"] = UDim2.new(0.04808, 0, 0.1241, 0);


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.DJump
G2L["ba"] = Instance.new("TextLabel", G2L["93"]);
G2L["ba"]["TextWrapped"] = true;
G2L["ba"]["BorderSizePixel"] = 0;
G2L["ba"]["TextSize"] = 14;
G2L["ba"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["ba"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ba"]["TextDirection"] = Enum.TextDirection.LeftToRight;
G2L["ba"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["ba"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["ba"]["BackgroundTransparency"] = 0.65;
G2L["ba"]["Size"] = UDim2.new(0, 99, 0, 39);
G2L["ba"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ba"]["Text"] = [[]];
G2L["ba"]["Name"] = [[DJump]];
G2L["ba"]["Position"] = UDim2.new(0.014, 0, 0.015, 0);


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.DJump.Toggle
G2L["bb"] = Instance.new("ImageLabel", G2L["ba"]);
G2L["bb"]["BorderSizePixel"] = 0;
G2L["bb"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["bb"]["ImageColor3"] = Color3.fromRGB(201, 201, 201);
G2L["bb"]["Image"] = [[rbxassetid://16382316568]];
G2L["bb"]["Size"] = UDim2.new(0, 37, 0, 22);
G2L["bb"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["bb"]["Name"] = [[Toggle]];
G2L["bb"]["Position"] = UDim2.new(0.53234, 0, 0.222, 0);


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.DJump.Toggle.UICorner
G2L["bc"] = Instance.new("UICorner", G2L["bb"]);
G2L["bc"]["CornerRadius"] = UDim.new(1, 0);


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.DJump.Toggle.Button
G2L["bd"] = Instance.new("TextButton", G2L["bb"]);
G2L["bd"]["BorderSizePixel"] = 0;
G2L["bd"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["bd"]["TextSize"] = 14;
G2L["bd"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["bd"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["bd"]["Size"] = UDim2.new(0, 98, 0, 39);
G2L["bd"]["BackgroundTransparency"] = 1;
G2L["bd"]["Name"] = [[Button]];
G2L["bd"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["bd"]["Text"] = [[]];
G2L["bd"]["Position"] = UDim2.new(-1.41087, 0, -0.37651, 0);


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.DJump.Toggle.Button.Script
G2L["be"] = Instance.new("LocalScript", G2L["bd"]);
G2L["be"]["Name"] = [[Script]];


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.DJump.Toggle.Circle
G2L["bf"] = Instance.new("Frame", G2L["bb"]);
G2L["bf"]["BorderSizePixel"] = 0;
G2L["bf"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["bf"]["Size"] = UDim2.new(0, 18, 0, 18);
G2L["bf"]["Position"] = UDim2.new(0.05, 0, 0, 2);
G2L["bf"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["bf"]["Name"] = [[Circle]];


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.DJump.Toggle.Circle.UICorner
G2L["c0"] = Instance.new("UICorner", G2L["bf"]);
G2L["c0"]["CornerRadius"] = UDim.new(1, 0);


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.DJump.UICorner
G2L["c1"] = Instance.new("UICorner", G2L["ba"]);



-- StarterGui.VoxlHubRL.test1.1.CombatFrame.DJump.Text
G2L["c2"] = Instance.new("TextLabel", G2L["ba"]);
G2L["c2"]["TextWrapped"] = true;
G2L["c2"]["BorderSizePixel"] = 0;
G2L["c2"]["TextSize"] = 14;
G2L["c2"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["c2"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c2"]["TextDirection"] = Enum.TextDirection.LeftToRight;
G2L["c2"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["c2"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c2"]["BackgroundTransparency"] = 1;
G2L["c2"]["Size"] = UDim2.new(0, 44, 0, 28);
G2L["c2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c2"]["Text"] = [[Double]];
G2L["c2"]["Name"] = [[Text]];
G2L["c2"]["Position"] = UDim2.new(0.07839, 0, -0.0041, 0);


-- StarterGui.VoxlHubRL.test1.1.CombatFrame.DJump.Text
G2L["c3"] = Instance.new("TextLabel", G2L["ba"]);
G2L["c3"]["TextWrapped"] = true;
G2L["c3"]["BorderSizePixel"] = 0;
G2L["c3"]["TextSize"] = 14;
G2L["c3"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["c3"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c3"]["TextDirection"] = Enum.TextDirection.LeftToRight;
G2L["c3"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["c3"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c3"]["BackgroundTransparency"] = 1;
G2L["c3"]["Size"] = UDim2.new(0, 44, 0, 28);
G2L["c3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c3"]["Text"] = [[Jump]];
G2L["c3"]["Name"] = [[Text]];
G2L["c3"]["Position"] = UDim2.new(0.09859, 0, 0.27795, 0);


-- StarterGui.VoxlHubRL.test1.1.EspFrame
G2L["c4"] = Instance.new("ScrollingFrame", G2L["2"]);
G2L["c4"]["Visible"] = false;
G2L["c4"]["Active"] = true;
G2L["c4"]["BorderSizePixel"] = 0;
G2L["c4"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c4"]["Name"] = [[EspFrame]];
G2L["c4"]["Size"] = UDim2.new(0, 339, 0, 263);
G2L["c4"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c4"]["Position"] = UDim2.new(0.22667, 0, 0.17231, 0);
G2L["c4"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c4"]["ScrollBarThickness"] = 2;
G2L["c4"]["BackgroundTransparency"] = 0.5;


-- StarterGui.VoxlHubRL.test1.1.EspFrame.UICorner
G2L["c5"] = Instance.new("UICorner", G2L["c4"]);



-- StarterGui.VoxlHubRL.test1.1.EspFrame.Player
G2L["c6"] = Instance.new("TextLabel", G2L["c4"]);
G2L["c6"]["BorderSizePixel"] = 0;
G2L["c6"]["TextSize"] = 14;
G2L["c6"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["c6"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c6"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["c6"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c6"]["BackgroundTransparency"] = 0.65;
G2L["c6"]["Size"] = UDim2.new(0, 99, 0, 39);
G2L["c6"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c6"]["Text"] = [[	 Player]];
G2L["c6"]["Name"] = [[Player]];
G2L["c6"]["Position"] = UDim2.new(0.014, 0, 0.06, 0);


-- StarterGui.VoxlHubRL.test1.1.EspFrame.Player.Toggle
G2L["c7"] = Instance.new("ImageLabel", G2L["c6"]);
G2L["c7"]["BorderSizePixel"] = 0;
G2L["c7"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c7"]["ImageColor3"] = Color3.fromRGB(201, 201, 201);
G2L["c7"]["Image"] = [[rbxassetid://16382316568]];
G2L["c7"]["Size"] = UDim2.new(0, 37, 0, 22);
G2L["c7"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c7"]["Name"] = [[Toggle]];
G2L["c7"]["Position"] = UDim2.new(0.53234, 0, 0.222, 0);


-- StarterGui.VoxlHubRL.test1.1.EspFrame.Player.Toggle.UICorner
G2L["c8"] = Instance.new("UICorner", G2L["c7"]);
G2L["c8"]["CornerRadius"] = UDim.new(1, 0);


-- StarterGui.VoxlHubRL.test1.1.EspFrame.Player.Toggle.Button
G2L["c9"] = Instance.new("TextButton", G2L["c7"]);
G2L["c9"]["BorderSizePixel"] = 0;
G2L["c9"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c9"]["TextSize"] = 14;
G2L["c9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c9"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["c9"]["Size"] = UDim2.new(0, 98, 0, 39);
G2L["c9"]["BackgroundTransparency"] = 1;
G2L["c9"]["Name"] = [[Button]];
G2L["c9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c9"]["Text"] = [[]];
G2L["c9"]["Position"] = UDim2.new(-1.41087, 0, -0.37651, 0);


-- StarterGui.VoxlHubRL.test1.1.EspFrame.Player.Toggle.Button.Script
G2L["ca"] = Instance.new("LocalScript", G2L["c9"]);
G2L["ca"]["Name"] = [[Script]];


-- StarterGui.VoxlHubRL.test1.1.EspFrame.Player.Toggle.Circle
G2L["cb"] = Instance.new("Frame", G2L["c7"]);
G2L["cb"]["BorderSizePixel"] = 0;
G2L["cb"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["cb"]["Size"] = UDim2.new(0, 18, 0, 18);
G2L["cb"]["Position"] = UDim2.new(0.05, 0, 0, 2);
G2L["cb"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["cb"]["Name"] = [[Circle]];


-- StarterGui.VoxlHubRL.test1.1.EspFrame.Player.Toggle.Circle.UICorner
G2L["cc"] = Instance.new("UICorner", G2L["cb"]);
G2L["cc"]["CornerRadius"] = UDim.new(1, 0);


-- StarterGui.VoxlHubRL.test1.1.EspFrame.Player.UICorner
G2L["cd"] = Instance.new("UICorner", G2L["c6"]);



-- StarterGui.VoxlHubRL.test1.1.EspFrame.Player Esp
G2L["ce"] = Instance.new("TextLabel", G2L["c4"]);
G2L["ce"]["BorderSizePixel"] = 0;
G2L["ce"]["TextSize"] = 15;
G2L["ce"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ce"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["ce"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["ce"]["BackgroundTransparency"] = 1;
G2L["ce"]["Size"] = UDim2.new(0, 99, 0, 39);
G2L["ce"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["ce"]["Text"] = [[Player Esp]];
G2L["ce"]["Name"] = [[Player Esp]];
G2L["ce"]["Position"] = UDim2.new(0.014, 0, 0.004, 0);


-- StarterGui.VoxlHubRL.test1.1.EspFrame.Player Esp.UICorner
G2L["cf"] = Instance.new("UICorner", G2L["ce"]);



-- StarterGui.VoxlHubRL.test1.1.EspFrame.Trinket Esp
G2L["d0"] = Instance.new("TextLabel", G2L["c4"]);
G2L["d0"]["BorderSizePixel"] = 0;
G2L["d0"]["TextSize"] = 15;
G2L["d0"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d0"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["d0"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d0"]["BackgroundTransparency"] = 1;
G2L["d0"]["Size"] = UDim2.new(0, 99, 0, 39);
G2L["d0"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d0"]["Text"] = [[Trinket Esp]];
G2L["d0"]["Name"] = [[Trinket Esp]];
G2L["d0"]["Position"] = UDim2.new(0.698, 0, 0.004, 0);


-- StarterGui.VoxlHubRL.test1.1.EspFrame.Trinket Esp.UICorner
G2L["d1"] = Instance.new("UICorner", G2L["d0"]);



-- StarterGui.VoxlHubRL.test1.1.EspFrame.Health Bar
G2L["d2"] = Instance.new("TextLabel", G2L["c4"]);
G2L["d2"]["BorderSizePixel"] = 0;
G2L["d2"]["TextSize"] = 14;
G2L["d2"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["d2"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d2"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["d2"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d2"]["BackgroundTransparency"] = 0.65;
G2L["d2"]["Size"] = UDim2.new(0, 99, 0, 39);
G2L["d2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d2"]["Text"] = [[	 ]];
G2L["d2"]["Name"] = [[Health Bar]];
G2L["d2"]["Position"] = UDim2.new(0.014, 0, 0.13, 0);


-- StarterGui.VoxlHubRL.test1.1.EspFrame.Health Bar.Toggle
G2L["d3"] = Instance.new("ImageLabel", G2L["d2"]);
G2L["d3"]["BorderSizePixel"] = 0;
G2L["d3"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d3"]["ImageColor3"] = Color3.fromRGB(201, 201, 201);
G2L["d3"]["Image"] = [[rbxassetid://16382316568]];
G2L["d3"]["Size"] = UDim2.new(0, 37, 0, 22);
G2L["d3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d3"]["Name"] = [[Toggle]];
G2L["d3"]["Position"] = UDim2.new(0.53234, 0, 0.222, 0);


-- StarterGui.VoxlHubRL.test1.1.EspFrame.Health Bar.Toggle.UICorner
G2L["d4"] = Instance.new("UICorner", G2L["d3"]);
G2L["d4"]["CornerRadius"] = UDim.new(1, 0);


-- StarterGui.VoxlHubRL.test1.1.EspFrame.Health Bar.Toggle.Button
G2L["d5"] = Instance.new("TextButton", G2L["d3"]);
G2L["d5"]["BorderSizePixel"] = 0;
G2L["d5"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d5"]["TextSize"] = 14;
G2L["d5"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d5"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["d5"]["Size"] = UDim2.new(0, 98, 0, 39);
G2L["d5"]["BackgroundTransparency"] = 1;
G2L["d5"]["Name"] = [[Button]];
G2L["d5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d5"]["Text"] = [[]];
G2L["d5"]["Position"] = UDim2.new(-1.41087, 0, -0.37651, 0);


-- StarterGui.VoxlHubRL.test1.1.EspFrame.Health Bar.Toggle.Button.Script
G2L["d6"] = Instance.new("LocalScript", G2L["d5"]);
G2L["d6"]["Name"] = [[Script]];


-- StarterGui.VoxlHubRL.test1.1.EspFrame.Health Bar.Toggle.Circle
G2L["d7"] = Instance.new("Frame", G2L["d3"]);
G2L["d7"]["BorderSizePixel"] = 0;
G2L["d7"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d7"]["Size"] = UDim2.new(0, 18, 0, 18);
G2L["d7"]["Position"] = UDim2.new(0.05, 0, 0, 2);
G2L["d7"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["d7"]["Name"] = [[Circle]];


-- StarterGui.VoxlHubRL.test1.1.EspFrame.Health Bar.Toggle.Circle.UICorner
G2L["d8"] = Instance.new("UICorner", G2L["d7"]);
G2L["d8"]["CornerRadius"] = UDim.new(1, 0);


-- StarterGui.VoxlHubRL.test1.1.EspFrame.Health Bar.UICorner
G2L["d9"] = Instance.new("UICorner", G2L["d2"]);



-- StarterGui.VoxlHubRL.test1.1.EspFrame.Health Bar.health
G2L["da"] = Instance.new("TextLabel", G2L["d2"]);
G2L["da"]["BorderSizePixel"] = 0;
G2L["da"]["TextSize"] = 14;
G2L["da"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["da"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["da"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["da"]["BackgroundTransparency"] = 1;
G2L["da"]["Size"] = UDim2.new(0, 44, 0, 28);
G2L["da"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["da"]["Text"] = [[Health]];
G2L["da"]["Name"] = [[health]];
G2L["da"]["Position"] = UDim2.new(0.086, 0, -0.022, 0);


-- StarterGui.VoxlHubRL.test1.1.EspFrame.Health Bar.Bar
G2L["db"] = Instance.new("TextLabel", G2L["d2"]);
G2L["db"]["BorderSizePixel"] = 0;
G2L["db"]["TextSize"] = 14;
G2L["db"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["db"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["db"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["db"]["BackgroundTransparency"] = 1;
G2L["db"]["Size"] = UDim2.new(0, 44, 0, 28);
G2L["db"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["db"]["Text"] = [[Bar]];
G2L["db"]["Name"] = [[Bar]];
G2L["db"]["Position"] = UDim2.new(0.07, 0, 0.3, 2);


-- StarterGui.VoxlHubRL.test1.1.Alwayssetposition
G2L["dc"] = Instance.new("LocalScript", G2L["2"]);
G2L["dc"]["Name"] = [[Alwayssetposition]];


-- StarterGui.VoxlHubRL.Open/close
G2L["dd"] = Instance.new("LocalScript", G2L["1"]);
G2L["dd"]["Name"] = [[Open/close]];


-- StarterGui.VoxlHubRL.AnticheatBypass
G2L["de"] = Instance.new("LocalScript", G2L["1"]);
G2L["de"]["Name"] = [[AnticheatBypass]];


-- StarterGui.VoxlHubRL.test1.1.setting.LocalScript
local function C_4()
local script = G2L["4"];
	local Main = script.Parent.Parent.MainFrame
	local Setting = script.Parent.Parent.SettingFrame
	local Esp = script.Parent.Parent.EspFrame
	local Combat = script.Parent.Parent.CombatFrame
	local Player = script.Parent.Parent.PlayerFrame
	
	local Main2 = script.Parent.Parent.Main
	local Setting2 = script.Parent.Parent.setting
	local Esp2 = script.Parent.Parent.esp
	local Combat2 = script.Parent.Parent.combat
	local Player2 = script.Parent.Parent.Player
	
	
	script.Parent.MouseButton1Click:Connect(function()
		Main2.BackgroundTransparency = 0.85
		Setting2.BackgroundTransparency = 0.65
		Esp2.BackgroundTransparency = 0.85
		Combat2.BackgroundTransparency = 0.85
		Player2.BackgroundTransparency = 0.85
		
		Main.Visible = false
		Setting.Visible = true
		Esp.Visible = false
		Combat.Visible = false
		Player.Visible = false
	end)
end;
task.spawn(C_4);
-- StarterGui.VoxlHubRL.test1.1.combat.LocalScript
local function C_6()
local script = G2L["6"];
	local Main = script.Parent.Parent.MainFrame
	local Setting = script.Parent.Parent.SettingFrame
	local Esp = script.Parent.Parent.EspFrame
	local Combat = script.Parent.Parent.CombatFrame
	local Player = script.Parent.Parent.PlayerFrame
	
	local Main2 = script.Parent.Parent.Main
	local Setting2 = script.Parent.Parent.setting
	local Esp2 = script.Parent.Parent.esp
	local Combat2 = script.Parent.Parent.combat
	local Player2 = script.Parent.Parent.Player
	
	script.Parent.MouseButton1Click:Connect(function()
		Main2.BackgroundTransparency = 0.85
		Setting2.BackgroundTransparency = 0.85
		Esp2.BackgroundTransparency = 0.85
		Combat2.BackgroundTransparency = 0.65
		Player2.BackgroundTransparency = 0.85
		
		Main.Visible = false
		Setting.Visible = false
		Esp.Visible = false
		Combat.Visible = true
		Player.Visible = false
	end)
end;
task.spawn(C_6);
-- StarterGui.VoxlHubRL.test1.1.Player.LocalScript
local function C_8()
local script = G2L["8"];
	local Main = script.Parent.Parent.MainFrame
	local Setting = script.Parent.Parent.SettingFrame
	local Esp = script.Parent.Parent.EspFrame
	local Combat = script.Parent.Parent.CombatFrame
	local Player = script.Parent.Parent.PlayerFrame
	
	local Main2 = script.Parent.Parent.Main
	local Setting2 = script.Parent.Parent.setting
	local Esp2 = script.Parent.Parent.esp
	local Combat2 = script.Parent.Parent.combat
	local Player2 = script.Parent.Parent.Player
	
	
	script.Parent.MouseButton1Click:Connect(function()
		Main2.BackgroundTransparency = 0.85
		Setting2.BackgroundTransparency = 0.85
		Esp2.BackgroundTransparency = 0.85
		Combat2.BackgroundTransparency = 0.85
		Player2.BackgroundTransparency = 0.65
		
		Main.Visible = false
		Setting.Visible = false
		Esp.Visible = false
		Combat.Visible = false
		Player.Visible = true
	end)
end;
task.spawn(C_8);
-- StarterGui.VoxlHubRL.test1.1.Main.LocalScript
local function C_a()
local script = G2L["a"];
	local Main = script.Parent.Parent.MainFrame
	local Setting = script.Parent.Parent.SettingFrame
	local Esp = script.Parent.Parent.EspFrame
	local Combat = script.Parent.Parent.CombatFrame
	local Player = script.Parent.Parent.PlayerFrame
	
	local Main2 = script.Parent.Parent.Main
	local Setting2 = script.Parent.Parent.setting
	local Esp2 = script.Parent.Parent.esp
	local Combat2 = script.Parent.Parent.combat
	local Player2 = script.Parent.Parent.Player
	
	
	script.Parent.MouseButton1Click:Connect(function()
		Main2.BackgroundTransparency = 0.65
		Setting2.BackgroundTransparency = 0.85
		Esp2.BackgroundTransparency = 0.85
		Combat2.BackgroundTransparency = 0.85
		Player2.BackgroundTransparency = 0.85
		 
		 Main.Visible = true
		 Setting.Visible = false
		 Esp.Visible = false
		 Combat.Visible = false
		 Player.Visible = false
	end)
end;
task.spawn(C_a);
-- StarterGui.VoxlHubRL.test1.1.LootingTime
local function C_d()
local script = G2L["d"];
	repeat wait(0.25) until game:IsLoaded() wait(0.5)
	
	if game.PlaceId == 3016661674 or game.GameId ~= 1087859240 then return end
	
	local snakeSpawnTime = workspace:WaitForChild("MonsterSpawns"):WaitForChild("Triggers"):WaitForChild("CastleRockSnake"):WaitForChild("LastSpawned")
	local Deep4SpawnTime = workspace:WaitForChild("MonsterSpawns"):WaitForChild("Triggers"):WaitForChild("evileye1"):WaitForChild("LastSpawned")
	local SunkenSpawnTime = workspace:WaitForChild("MonsterSpawns"):WaitForChild("Triggers"):WaitForChild("evileye2"):WaitForChild("LastSpawned")
	local SnakepitSpawnTime = workspace:WaitForChild("MonsterSpawns"):WaitForChild("Triggers"):WaitForChild("MazeSnakes"):WaitForChild("LastSpawned")
	
	local lb = Drawing.new("Text")
	function SecondsToClock(seconds)
		local seconds = tonumber(seconds)
	
		if seconds <= 0 then
			return "00:00:00";
		else
			hours = string.format("%02.f", math.floor(seconds/3600));
			mins = string.format("%02.f", math.floor(seconds/60 - (hours*60)));
			secs = string.format("%02.f", math.floor(seconds - hours*3600 - mins *60));
			return hours.."h "..mins.."m "..secs .. "s"
		end
	end
	
	local hidden = false
	
	--[[game:GetService("UserInputService").InputBegan:Connect(function(key,typing)
		if key.KeyCode == Enum.KeyCode.L and not typing then 
			if hidden == true then
				hidden = false
				lb.Transparency = 0
			elseif hidden == false then 
				hidden = true
				lb.Transparency = 1
			end
		end
	end)
	--]]
	game:GetService("RunService").RenderStepped:Connect(function()
		local delta = os.time() - snakeSpawnTime.Value
		local delta4 = os.time() - SunkenSpawnTime.Value
		local delta3 = os.time() - Deep4SpawnTime.Value
		local delta2 = os.time() - SnakepitSpawnTime.Value
		local vf = workspace.CurrentCamera.ViewportSize
		lb.Text = "Cr Time: " .. SecondsToClock(delta) .. " ago\nSnake Time: " .. SecondsToClock(delta2) .. " ago\nDeep2 Time: " .. SecondsToClock(delta3) .. " ago\nSunken Time: " .. SecondsToClock(delta4) .. " ago" 
		lb.Outline = true
		lb.Visible = true
		lb.Color = Color3.new(1,1,1)
		lb.ZIndex = 3
		lb.Size = 20
		lb.Position = Vector2.new(1700, 650)
		if script.Parent.Visible == false then
			lb.Transparency = 0
		else
			lb.Transparency = 1
		end
	end)
end;
task.spawn(C_d);
-- StarterGui.VoxlHubRL.test1.1.esp.LocalScript
local function C_10()
local script = G2L["10"];
	local Main = script.Parent.Parent.MainFrame
	local Setting = script.Parent.Parent.SettingFrame
	local Esp = script.Parent.Parent.EspFrame
	local Combat = script.Parent.Parent.CombatFrame
	local Player = script.Parent.Parent.PlayerFrame
	
	local Main2 = script.Parent.Parent.Main
	local Setting2 = script.Parent.Parent.setting
	local Esp2 = script.Parent.Parent.esp
	local Combat2 = script.Parent.Parent.combat
	local Player2 = script.Parent.Parent.Player
	
	script.Parent.MouseButton1Click:Connect(function()
		Main2.BackgroundTransparency = 0.85
		Setting2.BackgroundTransparency = 0.85
		Esp2.BackgroundTransparency = 0.65
		Combat2.BackgroundTransparency = 0.85
		Player2.BackgroundTransparency = 0.85
		
		Main.Visible = false
		Setting.Visible = false
		Esp.Visible = true
		Combat.Visible = false
		Player.Visible = false
	end)
end;
task.spawn(C_10);
-- StarterGui.VoxlHubRL.test1.1.PlayerInfo.Username.Cpyclipboard.LocalScript
local function C_16()
local script = G2L["16"];
	script.Parent.MouseButton1Click:Connect(function()
				setclipboard(script.Parent.Parent.UsernameN.Text)
	end)
end;
task.spawn(C_16);
-- StarterGui.VoxlHubRL.test1.1.PlayerInfo.IngameName.Cpyclipboard.LocalScript
local function C_1a()
local script = G2L["1a"];
	script.Parent.MouseButton1Click:Connect(function()
		setclipboard(script.Parent.Parent.IngameNameN.Text)
	end)
end;
task.spawn(C_1a);
-- StarterGui.VoxlHubRL.test1.1.PlayerInfo.PlayersInfoscript
local function C_1e()
local script = G2L["1e"];
	local service_cache = {}
	local services = setmetatable({}, {
		__index = function(self, index)
			local cached_service = service_cache[index]
			if not cached_service then 
				service_cache[index] = select(2, pcall(game.GetService, game, index))
				return service_cache[index]
			end 
			return cached_service
		end
	})
	
	local player = services.Players.LocalPlayer
	local current_spectating = nil  -- Track the currently spectated player
	local previous_label = nil 
	
	do
		local selected_label
		local mouse_button_1 = Enum.UserInputType.MouseButton1
	
		services.UserInputService.InputBegan:Connect(function(input, processed)
			local gui_children = player.PlayerGui.LeaderboardGui.MainFrame.ScrollingFrame:GetChildren()
	
			for index = 1, #gui_children do
				local value = gui_children[index]
	
				value.MouseEnter:Connect(function()
					selected_label = value
				end)
	
				value.MouseLeave:Connect(function()
					if selected_label == value then
						selected_label = nil
					end
				end)
			end
			if input.UserInputType == mouse_button_1 then
				if selected_label then
					local selected_text = selected_label.Text:gsub("[^%w%s_]+", ""):match("^%s*(.-)%s*$")
					local selected_player = services.Players:FindFirstChild(selected_text)
					
	
					
					
					
					if selected_player then
						if current_spectating == selected_player then
							script.Parent.Visible = false
						   print("ur selecting same player")
							current_spectating = nil -- Reset spectating status
							previous_label = nil
						else
							-- Start spectating the new player
							--[[ if previous_label then
								previous_label.TextColor3 = Color3.new(1, 1, 1) -- Reset previous label color
							end --]]
							local selected_character = selected_player.Character
								--local selected_humanoid = selected_character:FindFirstChildOfClass("Humanoid")
	
								
								
							script.Parent.Visible = true
								
								
	
								---
								-- reset
							         script.Parent.Class.ClassN.Text = "Freshie"
								    -- Username
									script.Parent.Username.UsernameN.Text = selected_player.Name
									
									-- IngameName
									if selected_character then
								for _, child in ipairs(selected_character:GetChildren()) do
									if child:IsA("Model") and child:FindFirstChild("FakeHumanoid") and child:FindFirstChild("Head") then
										script.Parent.IngameName.IngameNameN.Text = child.Name
									end
								end
									else
								        script.Parent.IngameName.IngameNameN.Text = "Unknow"
								end
								
							local backpack = selected_player:FindFirstChild("Backpack")
							if backpack then
								for _, tool in ipairs(backpack:GetChildren()) do
									if --[[tool:IsA("Tool")--]] tool.Name == "Grapple" or tool.Name == "Resurrection" then
										script.Parent.Class.ClassN.Text = "Shinobi"
										break
									elseif tool.Name == "Shadow Step" or tool.Name == "Chain Lethality" then
										script.Parent.Class.ClassN.Text = "Faceless"
										break
									elseif tool.Name == "Elegant Slash" then
										script.Parent.Class.ClassN.Text = "Ultra Spy"
										break
									elseif tool.Name == "Music Meter" or tool.Name == "Faster Meter Charge" then
										script.Parent.Class.ClassN.Text = "Ultra Bard"
										break
									elseif tool.Name == "Observe" or tool.Name == "Custos" then
										script.Parent.Class.ClassN.Text = "Illusionist"
										break
									elseif tool.Name == "Snap Verdien" or tool.Name == "Perflora" then
										script.Parent.Class.ClassN.Text = "Druid"
										break
									elseif tool.Name == "Howler Summoning" or tool.Name == "Secare" or tool.Name == "Command Monsters" then
										script.Parent.Class.ClassN.Text = "Necro"
										break
									elseif tool.Name == "Deep Sacrifice" or tool.Name == "Chain Pull" then
										script.Parent.Class.ClassN.Text = "DeepKnight"
										break
									elseif tool.Name == "Dragon Awakening" or tool.Name == "Wing Soar" then
										script.Parent.Class.ClassN.Text = "DragonKnight"
										break
									elseif tool.Name == "Grindstone" or tool.Name == "Hammer Training" then
										script.Parent.Class.ClassN.Text = "BlackSmith"
										break
									elseif tool.Name == "Hyper Body" then
										script.Parent.Class.ClassN.Text = "Sigil Knight Commander"
										break
									elseif tool.Name == "Wrathful Leap" or tool.Name == "Abyssal Scream" then
										script.Parent.Class.ClassN.Text = "Abyss Walker"
										break
									elseif tool.Name == "Dark Flame Burst" then
										script.Parent.Class.ClassN.Text = "Dark Sigil"
										break
									elseif tool.Name == "Lightning Elbow" or tool.Name == "Lightning Dash" then
										script.Parent.Class.ClassN.Text = "Dragon Sage"
										break
									elseif tool.Name == "Axe Kick" or tool.Name == "Demon Flip" or tool.Name == "Spin Kick" then
										script.Parent.Class.ClassN.Text = "Oni"
										break
									end
								end
							end
							
	
							--[[
							if backpack then
								local items = {}
	
								for _, item in ipairs(backpack:GetChildren()) do
									table.insert(items, item.Name)
								end
	                            --script.Parent.Skill.SkillN.Text = table.concat(items, ", ")
								print(table.concat(items, ", "))
							else
								--script.Parent.Skill.SkillN.Text = "No Items"
								print("Noitem")
							end
								--]]	
									
									
							if backpack then
								local itemCounts = {}  -- ใช้ Dictionary เก็บจำนวนของแต่ละไอเทม
	
								for _, item in ipairs(backpack:GetChildren()) do
									if itemCounts[item.Name] then
										itemCounts[item.Name] = itemCounts[item.Name] + 1
									else
										itemCounts[item.Name] = 1
									end
								end
	
								local formattedItems = {}
	
								for itemName, count in pairs(itemCounts) do
									if count > 1 then
										table.insert(formattedItems, itemName .. "(" .. count .. ")")
									else
										table.insert(formattedItems, itemName)
									end
								end
	
								script.Parent.Skill.SkillN.Text = table.concat(formattedItems, ", ")
							else
								script.Parent.Skill.SkillN.Text = "No Items"
							end
									
									
									
									
									
									
									
									
								---
									current_spectating = selected_player -- Update spectating status
									previous_label = selected_label -- Track the newly selected label
						end
					end
				end
			end
			
		end)
	end
end;
task.spawn(C_1e);
-- StarterGui.VoxlHubRL.test1.1.Spectatescriptoldthird
local function C_23()
local script = G2L["23"];
	local service_cache = {}
	local services = setmetatable({}, {
		__index = function(self, index)
			local cached_service = service_cache[index]
			if not cached_service then 
				service_cache[index] = select(2, pcall(game.GetService, game, index))
				return service_cache[index]
			end 
			return cached_service
		end
	})
	
	
	local original_label_colors = {} -- Table to store original colors
	local player = services.Players.LocalPlayer
	local camera = workspace.CurrentCamera
	local current_spectating = nil  -- Track the currently spectated player
	local previous_label = nil -- Track the previously selected label
	
	
	do -- click spectate
		local selected_label
		local mouse_button_2 = Enum.UserInputType.MouseButton2
	
		services.UserInputService.InputBegan:Connect(function(input, processed)
			local gui_children = player.PlayerGui.LeaderboardGui.MainFrame.ScrollingFrame:GetChildren()
	
			for index = 1, #gui_children do
				local value = gui_children[index]
	
				value.MouseEnter:Connect(function()
					selected_label = value
				end)
	
				value.MouseLeave:Connect(function()
					if selected_label == value then
						selected_label = nil
					end
				end)
			end
	
			if input.UserInputType == mouse_button_2 then
				if selected_label then
					-- Get the player based on the selected label's text
					local selected_text = selected_label.Text:gsub("[^%w%s_]+", ""):match("^%s*(.-)%s*$")
					local selected_player = services.Players:FindFirstChild(selected_text)
	
					if selected_player then
						-- Check if we're already spectating the selected player
						if current_spectating == selected_player then
							-- If already spectating, reset to own character
							if previous_label then
								-- Restore original color
								if original_label_colors[previous_label] then
									previous_label.TextColor3 = original_label_colors[previous_label]
								else
									previous_label.TextColor3 = Color3.new(1, 1, 1) -- Default to white
								end
							end
							local character = player.Character
							if character then
								local humanoid = character:FindFirstChildOfClass("Humanoid")
								if humanoid then
									--
									previous_label.TextColor3 = original_label_colors[previous_label]
									--
									camera.CameraSubject = humanoid
								end
							end
							current_spectating = nil -- Reset spectating status
							previous_label = nil -- Reset previous label
						else
							-- Start spectating the new player
							if previous_label then
								-- Restore original color before changing to green
								if original_label_colors[previous_label] then
									previous_label.TextColor3 = original_label_colors[previous_label]
								else
									previous_label.TextColor3 = Color3.new(1, 1, 1) -- Default white
								end
							end
	
							-- Save original label color before changing
							original_label_colors[selected_label] = selected_label.TextColor3
	
							local selected_character = selected_player.Character
							if selected_character then
								local selected_humanoid = selected_character:FindFirstChildOfClass("Humanoid")
								if selected_humanoid then
									camera.CameraSubject = selected_humanoid
									current_spectating = selected_player -- Update spectating status
									selected_label.TextColor3 = Color3.new(0, 1, 0) -- Change text color to green
									previous_label = selected_label -- Track the newly selected label
								end
							else
								print("Character not found")
							end
						end
					end
				elseif not selected_label and current_spectating then
					-- If no label is selected, keep spectating the current player
					return
				else
					-- Reset to own character if no player is selected and not spectating anyone
					if previous_label then
						-- Restore original color
						if original_label_colors[previous_label] then
							previous_label.TextColor3 = original_label_colors[previous_label]
						else
							previous_label.TextColor3 = Color3.new(1, 1, 1) -- Default white
						end
					end
					local character = player.Character
					if character then
						local humanoid = character:FindFirstChildOfClass("Humanoid")
						if humanoid then
							--
							previous_label.TextColor3 = original_label_colors[previous_label]
							--
							camera.CameraSubject = humanoid
							current_spectating = nil -- Stop spectating
							previous_label = nil -- Reset label tracking
						end
					end
				end
			end
		end)
	end
	
end;
task.spawn(C_23);
-- StarterGui.VoxlHubRL.test1.1.SettingFrame.MaxHealerSetting.LocalScript
local function C_2d()
local script = G2L["2d"];
	local button = script.Parent.Action1
	local textLabel = script.Parent.Action1Text
	local userInputService = game:GetService("UserInputService")
	
	local waitingForKey = false
	
	button.MouseButton1Click:Connect(function()
		if not waitingForKey then
			waitingForKey = true
			textLabel.Text = "..."
	
			local inputConnection
			inputConnection = userInputService.InputBegan:Connect(function(input, gameProcessed)
				if not gameProcessed and input.UserInputType == Enum.UserInputType.Keyboard then
					textLabel.Text = input.KeyCode.Name
					waitingForKey = false
					inputConnection:Disconnect()
				end
			end)
		end
	end)
	
end;
task.spawn(C_2d);
-- StarterGui.VoxlHubRL.test1.1.SettingFrame.ToggleUI.LocalScript
local function C_33()
local script = G2L["33"];
	local button = script.Parent.Action1
	local textLabel = script.Parent.Action1Text
	local userInputService = game:GetService("UserInputService")
	
	local waitingForKey = false
	
	button.MouseButton1Click:Connect(function()
		if not waitingForKey then
			waitingForKey = true
			textLabel.Text = "..."
	
			local inputConnection
			inputConnection = userInputService.InputBegan:Connect(function(input, gameProcessed)
				if not gameProcessed and input.UserInputType == Enum.UserInputType.Keyboard then
					textLabel.Text = input.KeyCode.Name
					waitingForKey = false
					inputConnection:Disconnect()
				end
			end)
		end
	end)
	
end;
task.spawn(C_33);
-- StarterGui.VoxlHubRL.test1.1.SettingFrame.WorldPulseSetting.LocalScript
local function C_39()
local script = G2L["39"];
	local button = script.Parent.Action1
	local textLabel = script.Parent.Action1Text
	local userInputService = game:GetService("UserInputService")
	
	local waitingForKey = false
	
	button.MouseButton1Click:Connect(function()
		if not waitingForKey then
			waitingForKey = true
			textLabel.Text = "..."
	
			local inputConnection
			inputConnection = userInputService.InputBegan:Connect(function(input, gameProcessed)
				if not gameProcessed and input.UserInputType == Enum.UserInputType.Keyboard then
					textLabel.Text = input.KeyCode.Name
					waitingForKey = false
					inputConnection:Disconnect()
				end
			end)
		end
	end)
	
end;
task.spawn(C_39);
-- StarterGui.VoxlHubRL.test1.1.SettingFrame.HealthBarSetting.LocalScript
local function C_40()
local script = G2L["40"];
	local button = script.Parent.Action1
	local textLabel = script.Parent.Action1Text
	local userInputService = game:GetService("UserInputService")
	
	local waitingForKey = false
	
	button.MouseButton1Click:Connect(function()
		if not waitingForKey then
			waitingForKey = true
			textLabel.Text = "..."
	
			local inputConnection
			inputConnection = userInputService.InputBegan:Connect(function(input, gameProcessed)
				if not gameProcessed and input.UserInputType == Enum.UserInputType.Keyboard then
					textLabel.Text = input.KeyCode.Name
					waitingForKey = false
					inputConnection:Disconnect()
				end
			end)
		end
	end)
	
end;
task.spawn(C_40);
-- StarterGui.VoxlHubRL.test1.1.SettingFrame.AimbotGrappleSetting.LocalScript
local function C_46()
local script = G2L["46"];
	local button = script.Parent.Action1
	local textLabel = script.Parent.Action1Text
	local userInputService = game:GetService("UserInputService")
	
	local waitingForKey = false
	
	button.MouseButton1Click:Connect(function()
		if not waitingForKey then
			waitingForKey = true
			textLabel.Text = "..."
	
			local inputConnection
			inputConnection = userInputService.InputBegan:Connect(function(input, gameProcessed)
				if not gameProcessed and input.UserInputType == Enum.UserInputType.Keyboard then
					textLabel.Text = input.KeyCode.Name
					waitingForKey = false
					inputConnection:Disconnect()
				end
			end)
		end
	end)
	
end;
task.spawn(C_46);
-- StarterGui.VoxlHubRL.test1.1.MainFrame.Nofall.Toggle.Button.Script
local function C_4e()
local script = G2L["4e"];
	local toggled = false
	local debounce = false
	local nofall = false
	
	
	
	
	--alr tarafından yapıldı :)
	local Players = game:GetService("Players")
	local ScriptContext = game:GetService("ScriptContext")
	
	for i,v in next, getconnections(ScriptContext.Error) do
		v:Disable()
	end
	
	local Player = Players.LocalPlayer
	local Character = Player.Character
	local Humanoid = Character.HumanoidRootPart
	
	local hook = hookfunction or detour_function
	
	local old
	old = hook(Instance.new("RemoteEvent").FireServer, function(self,...)
		local args = {...}
	
		if nofall == true and Player.Character ~= nil and Player.Character:FindFirstChild("CharacterHandler") and Player.Character.CharacterHandler:FindFirstChild("Remotes") and self.Parent == Player.Character.CharacterHandler.Remotes then
			if #args == 2 and typeof(args[2]) == "table" then
				return nil
			end
		end
	
		return old(self,...)
	end)
	
	
	function callback(state)
		print(state)
	end
	
	script.Parent.MouseButton1Click:Connect(function()
		if not debounce then
			debounce = true
	
			local targetPosition, targetColor
	
			if toggled then
				targetPosition = UDim2.new(0.05, 0,0, 2)
				targetColor = Color3.fromRGB(200, 200, 200)
	
				-- false
				nofall = false
	
			else
				targetPosition = UDim2.new(0.45, 0,0, 2)
				targetColor = Color3.fromRGB(53, 255, 110)
	
				--true
				nofall = true
			end
	
			local circleTween = game:GetService("TweenService"):Create(script.Parent.Parent.Circle, TweenInfo.new(0.25), {Position = targetPosition})
			local toggleTween = game:GetService("TweenService"):Create(script.Parent.Parent, TweenInfo.new(0.25), {ImageColor3 = targetColor})
	
			circleTween:Play()
			toggleTween:Play()
	
			circleTween.Completed:Connect(function()
				debounce = false
				toggled = not toggled
				pcall(callback, toggled)
			end)
		end
	end)
	
end;
task.spawn(C_4e);
-- StarterGui.VoxlHubRL.test1.1.MainFrame.Nofire.Toggle.Button.Script
local function C_56()
local script = G2L["56"];
	local toggled = false
	local debounce = false
	local nofire = false
	
	
	function callback(state)
		print(state)
	end
	
	script.Parent.MouseButton1Click:Connect(function()
		if not debounce then
			debounce = true
	
			local targetPosition, targetColor
	
			if toggled then
				targetPosition = UDim2.new(0.05, 0,0, 2)
				targetColor = Color3.fromRGB(200, 200, 200)
	
				-- false
	
			else
				targetPosition = UDim2.new(0.45, 0,0, 2)
				targetColor = Color3.fromRGB(53, 255, 110)
				
				--true
	
			end
	
			local circleTween = game:GetService("TweenService"):Create(script.Parent.Parent.Circle, TweenInfo.new(0.25), {Position = targetPosition})
			local toggleTween = game:GetService("TweenService"):Create(script.Parent.Parent, TweenInfo.new(0.25), {ImageColor3 = targetColor})
	
			circleTween:Play()
			toggleTween:Play()
	
			circleTween.Completed:Connect(function()
				debounce = false
				toggled = not toggled
				pcall(callback, toggled)
			end)
		end
	end)
	
end;
task.spawn(C_56);
-- StarterGui.VoxlHubRL.test1.1.MainFrame.NoInjuries.Toggle.Button.Script
local function C_5e()
local script = G2L["5e"];
	local map = game.Workspace:FindFirstChild("Map")
	local enable = false
	
	local function toggle()
		enable = not enable
	
		if enable then
			if map then
				for _, part in pairs(map:GetChildren()) do
					if part:IsA("BasePart") and part.Name == "PoisonField" then
						part.CanTouch = false -- Delete the part
					end
				end
			end
	
	
		else
			if map then
				for _, part in pairs(map:GetChildren()) do
					if part:IsA("BasePart") and part.Name == "PoisonField" then
						part.CanTouch = true -- Delete the part
					end
				end
			end
	
		end
	
	end
	
	
	
	local toggled = false
	local debounce = false
	
	
	
	function callback(state)
		print(state)
	end
	
	script.Parent.MouseButton1Click:Connect(function()
		if not debounce then
			debounce = true
	
			local targetPosition, targetColor
	
			if toggled then
				targetPosition = UDim2.new(0.05, 0,0, 2)
				targetColor = Color3.fromRGB(200, 200, 200)
	
				-- false
	toggle()
			else
				targetPosition = UDim2.new(0.45, 0,0, 2)
				targetColor = Color3.fromRGB(53, 255, 110)
				
				--true
	toggle()
			end
	
			local circleTween = game:GetService("TweenService"):Create(script.Parent.Parent.Circle, TweenInfo.new(0.25), {Position = targetPosition})
			local toggleTween = game:GetService("TweenService"):Create(script.Parent.Parent, TweenInfo.new(0.25), {ImageColor3 = targetColor})
	
			circleTween:Play()
			toggleTween:Play()
	
			circleTween.Completed:Connect(function()
				debounce = false
				toggled = not toggled
				pcall(callback, toggled)
			end)
		end
	end)
	
end;
task.spawn(C_5e);
-- StarterGui.VoxlHubRL.test1.1.MainFrame.NoOrderField.Toggle.Button.Script
local function C_68()
local script = G2L["68"];
	local map = game.Workspace:FindFirstChild("Map")
	local enable = false
	
	local function toggle()
		enable = not enable
		
	if enable then
		if map then
			for _, part in pairs(map:GetChildren()) do
				if part:IsA("BasePart") and part.Name == "MageField" then
					part.CanCollide = false
					part.CanTouch = false -- Delete the part
				end
			end
		end
	
	
		if map then
			for _, part in pairs(map:GetChildren()) do
				if part:IsA("BasePart") and part.Name == "OrderField" then
					part.CanCollide = false
					part.CanTouch = false -- Delete the part
				end
			end
		end
	else
			if map then
				for _, part in pairs(map:GetChildren()) do
					if part:IsA("BasePart") and part.Name == "MageField" then
						part.CanCollide = true
						part.CanTouch = true -- Delete the part
					end
				end
			end
	
	
			if map then
				for _, part in pairs(map:GetChildren()) do
					if part:IsA("BasePart") and part.Name == "OrderField" then
						part.CanCollide = true
						part.CanTouch = true -- Delete the part
					end
				end
			end
	end
	
	end
	
	
	
	
	
	
	
	
	
	
	
	
	
	local toggled = false
	local debounce = false
	local nofire = false
	
	
	function callback(state)
		print(state)
	end
	
	script.Parent.MouseButton1Click:Connect(function()
		if not debounce then
			debounce = true
	
			local targetPosition, targetColor
	
			if toggled then
				targetPosition = UDim2.new(0.05, 0,0, 2)
				targetColor = Color3.fromRGB(200, 200, 200)
	
	            toggle()
				-- false
	
			else
				targetPosition = UDim2.new(0.45, 0,0, 2)
				targetColor = Color3.fromRGB(53, 255, 110)
				
				toggle()
				--true
	
			end
	
			local circleTween = game:GetService("TweenService"):Create(script.Parent.Parent.Circle, TweenInfo.new(0.25), {Position = targetPosition})
			local toggleTween = game:GetService("TweenService"):Create(script.Parent.Parent, TweenInfo.new(0.25), {ImageColor3 = targetColor})
	
			circleTween:Play()
			toggleTween:Play()
	
			circleTween.Completed:Connect(function()
				debounce = false
				toggled = not toggled
				pcall(callback, toggled)
			end)
		end
	end)
	
end;
task.spawn(C_68);
-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.MaxHealer.Toggle.Button.Script
local function C_74()
local script = G2L["74"];
	
	
	
	
	
	
	
	
	local toggled = false
	local debounce = false
	local UserInputService = game:GetService("UserInputService")
	local use = false
	
	
	
	local function HandleHealth(playerCharacter)
		local Humanoid = playerCharacter:WaitForChild("Humanoid", 5)
		if Humanoid then
			Humanoid.HealthDisplayDistance = 100
			if use == true then
				Humanoid.HealthDisplayType = Enum.HumanoidHealthDisplayType.AlwaysOn
			else
				Humanoid.HealthDisplayType = Enum.HumanoidHealthDisplayType.AlwaysOff
			end
		end
	end
	
	for _, v in pairs(game.Players:GetChildren()) do
		if v.Character ~= nil then
			HandleHealth(v.Character)
		end
		v.CharacterAdded:Connect(function(createdCharacter)
			HandleHealth(createdCharacter)
		end)
	end
	
	game.Players.PlayerAdded:Connect(function(playerInstance)
		playerInstance.CharacterAdded:Connect(function(createdCharacter)
			HandleHealth(createdCharacter)
		end)
	end)
	
	
	
	
	
	
	
	
	
	
	
	
	
	function callback(state)
		print(state)
	end
	
	script.Parent.MouseButton1Click:Connect(function()
		if not debounce then
			debounce = true
	
			local targetPosition, targetColor
	
			if toggled then
				targetPosition = UDim2.new(0.05, 0,0, 2)
				targetColor = Color3.fromRGB(200, 200, 200)
				 use = false
				for _, v in pairs(game.Players:GetChildren()) do
					if v.Character ~= nil then
						HandleHealth(v.Character)
					end
					v.CharacterAdded:Connect(function(createdCharacter)
						HandleHealth(createdCharacter)
					end)
					end
				-- false
	
			else
				targetPosition = UDim2.new(0.45, 0,0, 2)
				targetColor = Color3.fromRGB(53, 255, 110)
				use = true
				for _, v in pairs(game.Players:GetChildren()) do
					if v.Character ~= nil then
						HandleHealth(v.Character)
					end
					v.CharacterAdded:Connect(function(createdCharacter)
						HandleHealth(createdCharacter)
					end)
					end
				--true
				
			end
	
			local circleTween = game:GetService("TweenService"):Create(script.Parent.Parent.Circle, TweenInfo.new(0.25), {Position = targetPosition})
			local toggleTween = game:GetService("TweenService"):Create(script.Parent.Parent, TweenInfo.new(0.25), {ImageColor3 = targetColor})
	
			circleTween:Play()
			toggleTween:Play()
	
			circleTween.Completed:Connect(function()
				debounce = false
				toggled = not toggled
				pcall(callback, toggled)
			end)
		end
	end)
	
	
	UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
	
		if gameProcessedEvent then return end
		if input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == Enum.KeyCode[script.Parent.Parent.Parent.Parent.Parent.SettingFrame.MaxHealerSetting.Action1Text.Text] then
			
			if not debounce then
				debounce = true
	
				local targetPosition, targetColor
	
				if toggled then
					targetPosition = UDim2.new(0.05, 0,0, 2)
					targetColor = Color3.fromRGB(200, 200, 200)
					use = false
					for _, v in pairs(game.Players:GetChildren()) do
						if v.Character ~= nil then
							HandleHealth(v.Character)
						end
						v.CharacterAdded:Connect(function(createdCharacter)
							HandleHealth(createdCharacter)
						end)
					end
					-- false
	
				else
					targetPosition = UDim2.new(0.45, 0,0, 2)
					targetColor = Color3.fromRGB(53, 255, 110)
					use = true
					for _, v in pairs(game.Players:GetChildren()) do
						if v.Character ~= nil then
							HandleHealth(v.Character)
						end
						v.CharacterAdded:Connect(function(createdCharacter)
							HandleHealth(createdCharacter)
						end)
					end
					--true
	
				end
	
				local circleTween = game:GetService("TweenService"):Create(script.Parent.Parent.Circle, TweenInfo.new(0.25), {Position = targetPosition})
				local toggleTween = game:GetService("TweenService"):Create(script.Parent.Parent, TweenInfo.new(0.25), {ImageColor3 = targetColor})
	
				circleTween:Play()
				toggleTween:Play()
	
				circleTween.Completed:Connect(function()
					debounce = false
					toggled = not toggled
					pcall(callback, toggled)
				end)
			end
		end	
	end)
end;
task.spawn(C_74);
-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.WorldPulse.Toggle.Button.Script
local function C_7c()
local script = G2L["7c"];
	local Players = game:GetService("Players")
	local RunService = game:GetService("RunService")
	local UserInputService = game:GetService("UserInputService")
	
	local LocalPlayer = Players.LocalPlayer
	local adornmentEnabled = false -- Set to true by default
	local adornments = {} -- Store adornments to track them
	
	-- Function to create a BoxHandleAdornment
	local function createBoxAdornment(part, size, player)
		local boxAdornment = Instance.new("BoxHandleAdornment")
		boxAdornment.Adornee = part
		boxAdornment.Size = size
		boxAdornment.Color3 = Color3.fromRGB(0, 255, 255) -- Cyan color
		boxAdornment.Transparency = 0.5 -- 50% transparent
		boxAdornment.ZIndex = 5
		boxAdornment.AlwaysOnTop = true
		boxAdornment.Parent = game.CoreGui -- Parent to CoreGui to ensure visibility in exploit scripts
	    
		-- Store adornment in a table associated with the player
		if not adornments[player] then
			adornments[player] = {}
		end
		table.insert(adornments[player], boxAdornment)
	end
	
	-- Function to remove all adornments from a specific player
	local function removeAdornments(player)
		if adornments[player] then
			for _, obj in ipairs(adornments[player]) do
				if obj then
					obj:Destroy()
				end
			end
			adornments[player] = nil
		end
	end
	
	-- Function to apply adornments to a character
	local function applyAdornments(character, player)
		if not character or character.Parent == nil then return end
		if player == LocalPlayer then return end -- Skip local player
	
		local bodyParts = {
			"Torso",
			"Right Leg",
			"Right Arm",
			"Left Leg",
			"Left Arm",
			"Head"
		}
	
		for _, partName in ipairs(bodyParts) do
			local part = character:FindFirstChild(partName)
			if part then
				local size = (partName == "Head") and Vector3.new(1, 1, 1) or part.Size
				createBoxAdornment(part, size, player)
			end
		end
	end
	
	-- Function to toggle adornments
	local function toggleAdornments()
		adornmentEnabled = not adornmentEnabled
	
		for _, player in ipairs(Players:GetPlayers()) do
			removeAdornments(player)
		end
	
		if adornmentEnabled then
			for _, player in ipairs(Players:GetPlayers()) do
				if player.Character and player ~= LocalPlayer then
					applyAdornments(player.Character, player)
				end
			end
		end
	end
	
	-- Apply adornments when a player's character spawns
	local function onCharacterAdded(character, player)
		removeAdornments(player) -- Remove old adornments
		task.wait(1) -- Ensure parts load properly
		if adornmentEnabled then
			applyAdornments(character, player)
		end
	end
	
	-- Connect events for existing and new players
	for _, player in ipairs(Players:GetPlayers()) do
		--if player ~= LocalPlayer then
		if adornmentEnabled == true then
			player.CharacterAdded:Connect(function(character)
				onCharacterAdded(character, player)
			end)
			if player.Character then
				applyAdornments(player.Character, player)
			end
		end
		--end
	end
	
	Players.PlayerAdded:Connect(function(player)
		if player ~= LocalPlayer then
			player.CharacterAdded:Connect(function(character)
				onCharacterAdded(character, player)
			end)
		end
	end)
	
	Players.PlayerRemoving:Connect(function(player)
		removeAdornments(player) -- Clean up when a player leaves
	end)
	
	-- Bind toggle to "T" key
	--[[
	UserInputService.InputBegan:Connect(function(input, gameProcessed)
		if gameProcessed then return end
		if input.KeyCode == Enum.KeyCode.T then
			toggleAdornments()
		end
	end)
	--]]
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	local toggled = false
	local debounce = false
	local nofire = false
	
	
	function callback(state)
		print(state)
	end
	
	script.Parent.MouseButton1Click:Connect(function()
		if not debounce then
			debounce = true
	
			local targetPosition, targetColor
	
			if toggled then
				targetPosition = UDim2.new(0.05, 0,0, 2)
				targetColor = Color3.fromRGB(200, 200, 200)
	
				toggleAdornments()
				game:GetService("Players").LocalPlayer.PlayerGui.OverlayGui.WorldPulseR.ImageTransparency = 1
	
	
	
			else
				targetPosition = UDim2.new(0.45, 0,0, 2)
				targetColor = Color3.fromRGB(53, 255, 110)
	
				toggleAdornments()
				game:GetService("Players").LocalPlayer.PlayerGui.OverlayGui.WorldPulseR.ImageTransparency = 0.5
	
	
	
			end
	
			local circleTween = game:GetService("TweenService"):Create(script.Parent.Parent.Circle, TweenInfo.new(0.25), {Position = targetPosition})
			local toggleTween = game:GetService("TweenService"):Create(script.Parent.Parent, TweenInfo.new(0.25), {ImageColor3 = targetColor})
	
			circleTween:Play()
			toggleTween:Play()
	
			circleTween.Completed:Connect(function()
				debounce = false
				toggled = not toggled
				pcall(callback, toggled)
			end)
		end
	end)
	
	
	UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
	
		if gameProcessedEvent then return end
		if input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == Enum.KeyCode[script.Parent.Parent.Parent.Parent.Parent.SettingFrame.WorldPulseSetting.Action1Text.Text] then
	
			if not debounce then
				debounce = true
	
				local targetPosition, targetColor
	
				if toggled then
					targetPosition = UDim2.new(0.05, 0,0, 2)
					targetColor = Color3.fromRGB(200, 200, 200)
	
					toggleAdornments()
					game:GetService("Players").LocalPlayer.PlayerGui.OverlayGui.WorldPulseR.ImageTransparency = 1
	
	
	
				else
					targetPosition = UDim2.new(0.45, 0,0, 2)
					targetColor = Color3.fromRGB(53, 255, 110)
	
					toggleAdornments()
					game:GetService("Players").LocalPlayer.PlayerGui.OverlayGui.WorldPulseR.ImageTransparency = 0.85
	
	
	
				end
	
				local circleTween = game:GetService("TweenService"):Create(script.Parent.Parent.Circle, TweenInfo.new(0.25), {Position = targetPosition})
				local toggleTween = game:GetService("TweenService"):Create(script.Parent.Parent, TweenInfo.new(0.25), {ImageColor3 = targetColor})
	
				circleTween:Play()
				toggleTween:Play()
	
				circleTween.Completed:Connect(function()
					debounce = false
					toggled = not toggled
					pcall(callback, toggled)
				end)
			end
		end	
	end)
end;
task.spawn(C_7c);
-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.Intent.Toggle.Button.Script
local function C_85()
local script = G2L["85"];
	local players = game:GetService("Players")
	local localPlayer = players.LocalPlayer  
	local isDisplayEnabled = false
	
	
	local function createToolNameTag(player)
		-- Make sure the player is not the LocalPlayer (your own character)
		if player == localPlayer then
			return  -- Don't create the tool name tag for the LocalPlayer
		end
	
		-- Wait for the character to load (may have just respawned)
		local function setupToolNameTag(character)
			local head = character:WaitForChild("Head")
	
			-- Create a BillboardGui to display the tool name above the head
			local billboardGui = Instance.new("BillboardGui")
			billboardGui.Adornee = head
			billboardGui.Parent = head
			billboardGui.Size = UDim2.new(0, 400, 0, 100)  -- Make the size large enough for visibility at 100 studs
			billboardGui.StudsOffset = Vector3.new(0, 3.5, 0)  -- Position above the head (can adjust for better positioning)
			billboardGui.AlwaysOnTop = true
			billboardGui.MaxDistance = 100  -- Ensure the BillboardGui is visible at distances up to 100 studs
	
			-- Create a TextLabel inside the BillboardGui
			local toolLabel = Instance.new("TextLabel")
			toolLabel.Parent = billboardGui
			toolLabel.Size = UDim2.new(1, 0, 1, 0)
			toolLabel.TextColor3 = Color3.new(1, 1, 1)  -- White text
			toolLabel.TextStrokeTransparency = 0
			toolLabel.BackgroundTransparency = 1
			toolLabel.TextSize = 22  -- Set text size to 10
			toolLabel.Text = ""  -- Default text when no tool is equipped
			toolLabel.FontFace = Enum.Font.Antique
	
			-- Function to update the tool name display
			local function updateToolName()
				-- Get the tool the player is holding
				local tool = character:FindFirstChildOfClass("Tool")
	
				-- Update the text based on the tool equipped
				if tool then
					toolLabel.Text = tool.Name  -- Set the label text to the tool's name
				else
					toolLabel.Text = ""  -- If no tool is equipped, display "No Tool"
				end
			end
	
			-- Update tool name when the character spawns or changes tools
			character.ChildAdded:Connect(function(child)
				if child:IsA("Tool") then
					updateToolName()
				end
			end)
	
			character.ChildRemoved:Connect(function(child)
				if child:IsA("Tool") then
					updateToolName()
				end
			end)
	
			-- Initial tool check
			updateToolName()
		end
	
		-- Connect the setup function to the character being added (in case the player respawns)
		player.CharacterAdded:Connect(function(character)
			setupToolNameTag(character)
		end)
	
		-- If the player is already in the game and has a character, create the tool name tag
		if player.Character then
			setupToolNameTag(player.Character)
		end
	end
	
	
	-- Create tool name tags for all players when they join the game
	players.PlayerAdded:Connect(function(player)
		player.CharacterAdded:Connect(function()
			if isDisplayEnabled then
				createToolNameTag(player)
			end
		end)
	end)
	
	-- Handle existing players when the script starts
	for _, player in ipairs(players:GetPlayers()) do
		if player.Character and isDisplayEnabled then
			createToolNameTag(player)
		end
	end
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	local toggled = false
	local debounce = false
	local nofire = false
	
	
	function callback(state)
		print(state)
	end
	
	script.Parent.MouseButton1Click:Connect(function()
		if not debounce then
			debounce = true
	
			local targetPosition, targetColor
	
			if toggled then
				targetPosition = UDim2.new(0.05, 0,0, 2)
				targetColor = Color3.fromRGB(200, 200, 200)
	
				isDisplayEnabled = false
				
				players.PlayerAdded:Connect(function(player)
					player.CharacterAdded:Connect(function()
						if isDisplayEnabled then
							createToolNameTag(player)
						end
					end)
				end)
	
				-- Handle existing players when the script starts
				for _, player in ipairs(players:GetPlayers()) do
					if player.Character and isDisplayEnabled then
						createToolNameTag(player)
					end
				end
	
			else
				targetPosition = UDim2.new(0.45, 0,0, 2)
				targetColor = Color3.fromRGB(53, 255, 110)
	
				isDisplayEnabled = true
				
				players.PlayerAdded:Connect(function(player)
					player.CharacterAdded:Connect(function()
						if isDisplayEnabled then
							createToolNameTag(player)
						end
					end)
				end)
	
				-- Handle existing players when the script starts
				for _, player in ipairs(players:GetPlayers()) do
					if player.Character and isDisplayEnabled then
						createToolNameTag(player)
					end
				end
	
			end
	
			local circleTween = game:GetService("TweenService"):Create(script.Parent.Parent.Circle, TweenInfo.new(0.25), {Position = targetPosition})
			local toggleTween = game:GetService("TweenService"):Create(script.Parent.Parent, TweenInfo.new(0.25), {ImageColor3 = targetColor})
	
			circleTween:Play()
			toggleTween:Play()
	
			circleTween.Completed:Connect(function()
				debounce = false
				toggled = not toggled
				pcall(callback, toggled)
			end)
		end
	end)
	
end;
task.spawn(C_85);
-- StarterGui.VoxlHubRL.test1.1.PlayerFrame.NoPommel.Toggle.Button.Script
local function C_8e()
local script = G2L["8e"];
	local toggled = false
	local debounce = false
	local nofire = false
	
	
	function callback(state)
		print(state)
	end
	
	script.Parent.MouseButton1Click:Connect(function()
		if not debounce then
			debounce = true
	
			local targetPosition, targetColor
	
			if toggled then
				targetPosition = UDim2.new(0.05, 0,0, 2)
				targetColor = Color3.fromRGB(200, 200, 200)
	
				print("noting")
	
			else
				targetPosition = UDim2.new(0.45, 0,0, 2)
				targetColor = Color3.fromRGB(53, 255, 110)
	
				while toggled == false do
				wait(0.1)
				game:GetService("Lighting").Blur.Enabled = false
				end
	
			end
	
			local circleTween = game:GetService("TweenService"):Create(script.Parent.Parent.Circle, TweenInfo.new(0.25), {Position = targetPosition})
			local toggleTween = game:GetService("TweenService"):Create(script.Parent.Parent, TweenInfo.new(0.25), {ImageColor3 = targetColor})
	
			circleTween:Play()
			toggleTween:Play()
	
			circleTween.Completed:Connect(function()
				debounce = false
				toggled = not toggled
				pcall(callback, toggled)
			end)
		end
	end)
	
end;
task.spawn(C_8e);
-- StarterGui.VoxlHubRL.test1.1.CombatFrame.AimbotGrapple.Toggle.Button.newoneWORKED
local function C_9a()
local script = G2L["9a"];
	local Mouse = game.Players.LocalPlayer:GetMouse()
	local Slider = script.Parent.Parent.Parent.Slider
	local Fill = Slider.Fill
	local Trigger = Slider.Trigger
	local OutputValue = 0
	local OutputLabel = Slider.Label
	
	local UserInputService = game:GetService("UserInputService")
	
	Fill.Size = UDim2.fromScale(OutputValue, 1)
	OutputLabel.Text = "Fov : "..tostring(math.round(OutputValue * 500))
	
	local TweenService = game:GetService("TweenService")
	local TweenStyle = TweenInfo.new(0.25, Enum.EasingStyle.Exponential)
	
	function UpdateSlider()
		local output = math.clamp((Mouse.X - Slider.AbsolutePosition.X) / Slider.AbsoluteSize.X, 0, 1)
		OutputLabel.Text = "Fov : "..tostring(math.round(output * 500))
	
		if OutputValue ~= output then
			TweenService:Create(Fill, TweenStyle, {Size = UDim2.fromScale(output, 1)}):Play()
		end
	
		OutputValue = output
		getgenv().aimbotFOV = output * 500 -- Update aimbot FOV with slider value
	end
	
	local sliderActive = false
	
	function ActivateSlider()
		sliderActive = true
		while sliderActive do
			UpdateSlider()
			task.wait()
		end
	end
	
	Trigger.MouseButton1Down:Connect(ActivateSlider)
	
	game:GetService("UserInputService").InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			sliderActive = false
		end
	end)
	
	getgenv().aimbotEnabled = false -- Toggle variable
	getgenv().aimbotFOV = 1
	
	local players = game:GetService("Players")
	local replicatedStorage = game:GetService("ReplicatedStorage")
	local userInputService = game:GetService("UserInputService")
	
	local localPlayer = players.LocalPlayer
	local mouse = localPlayer:GetMouse()
	local currentCamera = workspace.CurrentCamera
	
	local requests = replicatedStorage and replicatedStorage:WaitForChild("Requests")
	local getMouse = requests and requests:WaitForChild("GetMouse")
	
	local function getClosest(fov)
		local target, closest = nil, fov or math.huge
	
		for _, player in next, players:GetPlayers() do
			if player.Character and player ~= localPlayer and player.Character:FindFirstChild("HumanoidRootPart") then
				local position, onScreen = currentCamera:WorldToScreenPoint(player.Character.HumanoidRootPart.Position)
				local distance = (Vector2.new(position.X, position.Y) - Vector2.new(mouse.X, mouse.Y)).Magnitude
	
				if distance < closest and onScreen then
					closest = distance
					target = player
				end
			end
		end
	
		return target
	end
	
	getMouse.OnClientInvoke = function()
		if not getgenv().aimbotEnabled then
			return {
				Hit = mouse.Hit,
				Target = mouse.Target,
				UnitRay = mouse.UnitRay,
				X = mouse.X,
				Y = mouse.Y
			}
		end
	
		local character = localPlayer.Character
		local target = getClosest(getgenv().aimbotFOV)
		local targetCharacter = target and target.Character
		local defaultArgs = {
			Hit = mouse.Hit,
			Target = mouse.Target,
			UnitRay = mouse.UnitRay,
			X = mouse.X,
			Y = mouse.Y
		}
	
		if targetCharacter then
			local targetTorso = targetCharacter:FindFirstChild("HumanoidRootPart")
			if targetTorso then
				local cameraPosition = currentCamera.CFrame.Position
				local screenPosition, onScreen = currentCamera:WorldToViewportPoint(targetTorso.Position)
	
				return {
					Hit = targetTorso.CFrame,
					Target = targetTorso,
					UnitRay = Ray.new(cameraPosition, targetTorso.Position - cameraPosition),
					X = screenPosition.X,
					Y = screenPosition.Y
				}
			end
		end
	
		return defaultArgs
	end
	
	local toggled = false
	local debounce = false
	
	function callback(state)
		print(state)
	end
	
	script.Parent.MouseButton1Click:Connect(function()
		if not debounce then
			debounce = true
	
			local targetPosition, targetColor
	
			if toggled then
				targetPosition = UDim2.new(0.05, 0,0, 2)
				targetColor = Color3.fromRGB(200, 200, 200)
				getgenv().aimbotEnabled = false
			else
				targetPosition = UDim2.new(0.45, 0,0, 2)
				targetColor = Color3.fromRGB(53, 255, 110)
				getgenv().aimbotEnabled = true
			end
	
			local circleTween = game:GetService("TweenService"):Create(script.Parent.Parent.Circle, TweenInfo.new(0.25), {Position = targetPosition})
			local toggleTween = game:GetService("TweenService"):Create(script.Parent.Parent, TweenInfo.new(0.25), {ImageColor3 = targetColor})
	
			circleTween:Play()
			toggleTween:Play()
	
			circleTween.Completed:Connect(function()
				debounce = false
				toggled = not toggled
				pcall(callback, toggled)
			end)
		end
	end)
	
	
	UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
	
		if gameProcessedEvent then return end
		if input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == Enum.KeyCode[script.Parent.Parent.Parent.Parent.Parent.SettingFrame.AimbotGrappleSetting.Action1Text.Text] then
			if not debounce then
				debounce = true
	
				local targetPosition, targetColor
	
				if toggled then
					targetPosition = UDim2.new(0.05, 0,0, 2)
					targetColor = Color3.fromRGB(200, 200, 200)
					getgenv().aimbotEnabled = false
				else
					targetPosition = UDim2.new(0.45, 0,0, 2)
					targetColor = Color3.fromRGB(53, 255, 110)
					getgenv().aimbotEnabled = true
				end
	
				local circleTween = game:GetService("TweenService"):Create(script.Parent.Parent.Circle, TweenInfo.new(0.25), {Position = targetPosition})
				local toggleTween = game:GetService("TweenService"):Create(script.Parent.Parent, TweenInfo.new(0.25), {ImageColor3 = targetColor})
	
				circleTween:Play()
				toggleTween:Play()
	
				circleTween.Completed:Connect(function()
					debounce = false
					toggled = not toggled
					pcall(callback, toggled)
				end)
			end
		end	
	end)
end;
task.spawn(C_9a);
-- StarterGui.VoxlHubRL.test1.1.CombatFrame.Autobard.Toggle.Button.Script
local function C_ac()
local script = G2L["ac"];
	local toggled = false
	local debounce = false
	local autobardenabled = false
	
	local service_cache = {}
	local services = setmetatable({}, {
		__index = function(self, index)
			local cached_service = service_cache[index]
	
			if not cached_service then 
				service_cache[index] = select(2, pcall(game.GetService, game, index))
				return service_cache[index]
			end 
	
			return cached_service
		end
	})
	
	local player = services.Players.LocalPlayer
	local firesignal = firesignal
	
	do -- auto bard
		local function apply_bard(character)
			local bard_gui = player.PlayerGui:WaitForChild("BardGui")
			local boosts = character:WaitForChild("Boosts")
	
	
			-- bardstacking
			boosts.ChildAdded:Connect(function(child)
				if child.Name == "MusicianBuff" then
					task.wait()
					child:Destroy()
				end
			end)
	
			bard_gui.ChildAdded:Connect(function(note)
				if note.ClassName == "ImageButton" and autobardenabled == true then
					local outer_ring = note:WaitForChild("OuterRing")
	
					repeat 
						wait() 
					until outer_ring.Size.X.Offset - 35 <= note.Size.X.Offset
	
					firesignal(note.MouseButton1Click)
				end
			end)
		end
	
		local character = player.Character or player.CharacterAdded:Wait()
	
		apply_bard(character)
		player.CharacterAdded:Connect(apply_bard)
	
	end
	
	
	
	
	
	
	
	
	
	
	
	
	
	function callback(state)
		print(state)
	end
	
	script.Parent.MouseButton1Click:Connect(function()
		if not debounce then
			debounce = true
	
			local targetPosition, targetColor
	
			if toggled then
				targetPosition = UDim2.new(0.05, 0,0, 2)
				targetColor = Color3.fromRGB(200, 200, 200)
	
				-- false
				autobardenabled = false
			else
				targetPosition = UDim2.new(0.45, 0,0, 2)
				targetColor = Color3.fromRGB(53, 255, 110)
	
				--true
				autobardenabled = true
			end
	
			local circleTween = game:GetService("TweenService"):Create(script.Parent.Parent.Circle, TweenInfo.new(0.25), {Position = targetPosition})
			local toggleTween = game:GetService("TweenService"):Create(script.Parent.Parent, TweenInfo.new(0.25), {ImageColor3 = targetColor})
	
			circleTween:Play()
			toggleTween:Play()
	
			circleTween.Completed:Connect(function()
				debounce = false
				toggled = not toggled
				pcall(callback, toggled)
			end)
		end
	end)
	
end;
task.spawn(C_ac);
-- StarterGui.VoxlHubRL.test1.1.CombatFrame.BardStacking.Toggle.Button.Script
local function C_b5()
local script = G2L["b5"];
	local toggled = false
	local debounce = false
	local autobardstackenabled = false
	
	local service_cache = {}
	local services = setmetatable({}, {
		__index = function(self, index)
			local cached_service = service_cache[index]
	
			if not cached_service then 
				service_cache[index] = select(2, pcall(game.GetService, game, index))
				return service_cache[index]
			end 
	
			return cached_service
		end
	})
	
	local player = services.Players.LocalPlayer
	local firesignal = firesignal
	
	do -- auto bard
		local function apply_bard(character)
			local bard_gui = player.PlayerGui:WaitForChild("BardGui")
			local boosts = character:WaitForChild("Boosts")
	
	
			-- bardstacking
			boosts.ChildAdded:Connect(function(child)
				if autobardstackenabled == true and child.Name == "MusicianBuff" then
					task.wait()
					child:Destroy()
				end
			end)
	
		end
	
		local character = player.Character or player.CharacterAdded:Wait()
	
		apply_bard(character)
		player.CharacterAdded:Connect(apply_bard)
	
	end
	
	
	
	
	
	
	
	
	
	
	
	
	
	function callback(state)
		print(state)
	end
	
	script.Parent.MouseButton1Click:Connect(function()
		if not debounce then
			debounce = true
	
			local targetPosition, targetColor
	
			if toggled then
				targetPosition = UDim2.new(0.05, 0,0, 2)
				targetColor = Color3.fromRGB(200, 200, 200)
	
				-- false
				autobardstackenabled = false
			else
				targetPosition = UDim2.new(0.45, 0,0, 2)
				targetColor = Color3.fromRGB(53, 255, 110)
	
				--true
				autobardstackenabled = true
			end
	
			local circleTween = game:GetService("TweenService"):Create(script.Parent.Parent.Circle, TweenInfo.new(0.25), {Position = targetPosition})
			local toggleTween = game:GetService("TweenService"):Create(script.Parent.Parent, TweenInfo.new(0.25), {ImageColor3 = targetColor})
	
			circleTween:Play()
			toggleTween:Play()
	
			circleTween.Completed:Connect(function()
				debounce = false
				toggled = not toggled
				pcall(callback, toggled)
			end)
		end
	end)
	
end;
task.spawn(C_b5);
-- StarterGui.VoxlHubRL.test1.1.CombatFrame.DJump.Toggle.Button.Script
local function C_be()
local script = G2L["be"];
	local toggled = false
	local debounce = false
	
	
	
	function callback(state)
		print(state)
	end
	
	script.Parent.MouseButton1Click:Connect(function()
		if not debounce then
			debounce = true
	
			local targetPosition, targetColor
	
			if toggled then
				targetPosition = UDim2.new(0.05, 0,0, 2)
				targetColor = Color3.fromRGB(200, 200, 200)
	
				-- false
	
			else
				targetPosition = UDim2.new(0.45, 0,0, 2)
				targetColor = Color3.fromRGB(53, 255, 110)
				
				local userInputService = game:GetService("UserInputService")
				local lastPressTime = 0
				local doublePressDelay = 0.4  -- Time window for double press
				local cooldownTime = 3  -- Cooldown time in seconds
				local isCooldown = false  -- To track whether the cooldown is active
	
				userInputService.InputBegan:Connect(function(input, ch)
					if ch then return end  -- Ignore if the input is from the character (e.g., input from NPC)
	
					-- Check if the pressed key is Spacebar
					if input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == Enum.KeyCode.Space and toggled == true then
						local currentTime = tick()
	
						-- Check if we're within the double press window and not on cooldown
						if currentTime - lastPressTime <= doublePressDelay and not isCooldown then
							local player = game.Players.LocalPlayer
							local character = player.Character or player.CharacterAdded:Wait()
							local humanoid = character:WaitForChild("Humanoid")
	
							-- Create and play the animation
							local animation = Instance.new("Animation")
							animation.AnimationId = "rbxassetid://3139634168"  -- Replace with your actual animation ID
							local animationTrack = humanoid:LoadAnimation(animation)
							animationTrack:Play()
	
							-- Apply BodyVelocity to simulate a jump or force
							local BodyVelocity = Instance.new("BodyVelocity")
							BodyVelocity.MaxForce = Vector3.new(1000000, 1000000, 1000000)
							BodyVelocity.Parent = character.HumanoidRootPart
							BodyVelocity.Velocity = Vector3.new(0, 80, 0)
							game:GetService("Debris"):AddItem(BodyVelocity, 0.1)
	
							-- Start cooldown
							isCooldown = true
							wait(cooldownTime)  -- Wait for the cooldown to finish
							isCooldown = false
						end
	
						-- Update the last press time
						lastPressTime = currentTime
					end
				end)
	
			end
	
			local circleTween = game:GetService("TweenService"):Create(script.Parent.Parent.Circle, TweenInfo.new(0.25), {Position = targetPosition})
			local toggleTween = game:GetService("TweenService"):Create(script.Parent.Parent, TweenInfo.new(0.25), {ImageColor3 = targetColor})
	
			circleTween:Play()
			toggleTween:Play()
	
			circleTween.Completed:Connect(function()
				debounce = false
				toggled = not toggled
				pcall(callback, toggled)
			end)
		end
	end)
	
end;
task.spawn(C_be);
-- StarterGui.VoxlHubRL.test1.1.EspFrame.Player.Toggle.Button.Script
local function C_ca()
local script = G2L["ca"];
	local toggled = false
	local debounce = false
	
	
	
	function callback(state)
		print(state)
	end
	
	script.Parent.MouseButton1Click:Connect(function()
		if not debounce then
			debounce = true
	
			local targetPosition, targetColor
	
			if toggled then
				targetPosition = UDim2.new(0.05, 0,0, 2)
				targetColor = Color3.fromRGB(200, 200, 200)
	
				-- false
	
			else
				targetPosition = UDim2.new(0.45, 0,0, 2)
				targetColor = Color3.fromRGB(53, 255, 110)
				
				--true
	
			end
	
			local circleTween = game:GetService("TweenService"):Create(script.Parent.Parent.Circle, TweenInfo.new(0.25), {Position = targetPosition})
			local toggleTween = game:GetService("TweenService"):Create(script.Parent.Parent, TweenInfo.new(0.25), {ImageColor3 = targetColor})
	
			circleTween:Play()
			toggleTween:Play()
	
			circleTween.Completed:Connect(function()
				debounce = false
				toggled = not toggled
				pcall(callback, toggled)
			end)
		end
	end)
	
end;
task.spawn(C_ca);
-- StarterGui.VoxlHubRL.test1.1.EspFrame.Health Bar.Toggle.Button.Script
local function C_d6()
local script = G2L["d6"];
	-- Services
	local Players = game:GetService("Players")
	local LocalPlayer = Players.LocalPlayer
	local UserInputService = game:GetService("UserInputService")
	local toggled = false
	
	-- Toggle variable to control whether health bars are active
	local healthBarsEnabled = false
	local hascreateyet = false
	
	-- Table to store health bar references for each player
	local healthBars = {}
	
	-- Function to update the health bar
	local function updateHealthBar(healthFill, humanoid)
		if humanoid then
			local healthPercent = humanoid.Health / humanoid.MaxHealth
			healthFill.Size = UDim2.new(1, 0, healthPercent, 0)
			healthFill.Position = UDim2.new(0, 0, 1 - healthPercent, 0) -- Adjust position to make it decrease from top to bottom
	
			-- Change color based on health
			if healthPercent > 0.5 then
				healthFill.BackgroundColor3 = Color3.new(0, 1, 0) -- Green
			elseif healthPercent > 0.2 then
				healthFill.BackgroundColor3 = Color3.new(1, 1, 0) -- Yellow
			else
				healthFill.BackgroundColor3 = Color3.new(1, 0, 0) -- Red
			end
		end
	end
	
	-- Function to create the health bar UI
	local function createHealthBar(player, humanoid)
		local billboardGui = Instance.new("BillboardGui")
		billboardGui.Size = UDim2.new(2, 0, 5, 0) -- Width adjusted
		billboardGui.StudsOffset = Vector3.new(-2, -0.5, 0) -- Move to the left (negative value on X)
		billboardGui.AlwaysOnTop = true
		billboardGui.Adornee = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
		billboardGui.Name = "HealthBar"
		billboardGui.MaxDistance = math.huge
		if toggled == false then
			billboardGui.Enabled = false
			else
	        billboardGui.Enabled = true
		end
	
		local background = Instance.new("Frame", billboardGui)
		background.Size = UDim2.new(0.1, 0, 1, 0) -- Reduced width
		background.Position = UDim2.new(0, 0, 0, 0) -- Align to the left
		background.BackgroundColor3 = Color3.new(0, 0, 0)
		background.BorderSizePixel = 0
	
		local healthFill = Instance.new("Frame", background)
		healthFill.Name = "HealthFill"
		healthFill.BorderSizePixel = 0
	
		-- Initialize health bar state
		updateHealthBar(healthFill, humanoid)
	
		return billboardGui, healthFill
	end
	
	-- Function to handle player character
	local function onCharacterAdded(player)
		-- เชื่อมต่อเมื่อผู้เล่นมีการ respawn
		player.CharacterAdded:Connect(function(character)
			-- รอให้ตัวละครโหลดครบถ้วน
			task.wait(1)
	
			-- เช็คว่า character และ Humanoid มีอยู่
			if character and character:FindFirstChild("Humanoid") then
				local humanoid = character:FindFirstChild("Humanoid")
				local rootPart = character:FindFirstChild("HumanoidRootPart")
	
				if humanoid and rootPart then
					-- สร้าง health bar สำหรับตัวละครนี้
					local healthBar, healthFill = createHealthBar(player, humanoid)
					healthBar.Parent = rootPart
					healthBars[player.UserId] = healthBar -- Store health bar reference
	
					-- อัพเดท health bar เมื่อสุขภาพเปลี่ยน
					humanoid.HealthChanged:Connect(function()
						if healthBarsEnabled then
							updateHealthBar(healthFill, humanoid)
						end
					end)
				end
			end
		end)
	
		-- ถ้าผู้เล่นมีตัวละครอยู่แล้วตอนเริ่ม
		if player.Character then
			local character = player.Character
			task.wait(1)
	
			if character and character:FindFirstChild("Humanoid") then
				local humanoid = character:FindFirstChild("Humanoid")
				local rootPart = character:FindFirstChild("HumanoidRootPart")
	
				if humanoid and rootPart then
					-- สร้าง health bar สำหรับตัวละครนี้
					local healthBar, healthFill = createHealthBar(player, humanoid)
					healthBar.Parent = rootPart
					healthBars[player.UserId] = healthBar -- Store health bar reference
	
					-- อัพเดท health bar เมื่อสุขภาพเปลี่ยน
					humanoid.HealthChanged:Connect(function()
						if healthBarsEnabled then
							updateHealthBar(healthFill, humanoid)
						end
					end)
				end
			end
		end
	end
	
	-- Detect when players join
	Players.PlayerAdded:Connect(function(player)
		onCharacterAdded(player) -- เชื่อมต่อเมื่อผู้เล่นมีการ respawn
	end)
	
	-- Initial setup for all players (รวมถึงผู้เล่นที่อยู่แล้ว)
	for _, player in pairs(Players:GetPlayers()) do
		if player ~= LocalPlayer  then
			onCharacterAdded(player)
		end
	end
	
	-- Function to toggle health bars on or off
	local function toggleHealthBars()
		healthBarsEnabled = not healthBarsEnabled
		print("Health Bars Enabled: " .. tostring(healthBarsEnabled))
	
		-- Hide or show health bars based on the toggle
		for _, player in pairs(Players:GetPlayers()) do
			if healthBars[player.UserId] then
				if healthBarsEnabled then
					-- Show the health bar if enabled
					healthBars[player.UserId].Enabled = true
				else
					-- Hide the health bar if disabled
					healthBars[player.UserId].Enabled = false
				end
			end
		end
	end
	
	-- Bind a key to toggle health bars (e.g., pressing 'H' on the keyboard)
	
	--[[
	game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
		if gameProcessed then return end
		if input.KeyCode == Enum.KeyCode.H then
			toggleHealthBars()
		end
	end)
	--]]
	
	
	
	local debounce = false
	local nofire = false
	
	
	function callback(state)
		print(state)
	end
	
	script.Parent.MouseButton1Click:Connect(function()
		if not debounce then
			debounce = true
	
			local targetPosition, targetColor
	
			if toggled then
				targetPosition = UDim2.new(0.05, 0,0, 2)
				targetColor = Color3.fromRGB(200, 200, 200)
	
				toggleHealthBars()
	
				local Players = game:GetService("Players")
	
				for _, player in pairs(Players:GetPlayers()) do
					if player.Character then
						local rootPart = player.Character:FindFirstChild("HumanoidRootPart")
						if rootPart then
							local healthBar = rootPart:FindFirstChild("HealthBar")
							if healthBar then
								healthBar.Enabled = false
							end
						end
					end
				end
	
			else
				targetPosition = UDim2.new(0.45, 0,0, 2)
				targetColor = Color3.fromRGB(53, 255, 110)
	
				toggleHealthBars()
	
	
				local Players = game:GetService("Players")
	
				for _, player in pairs(Players:GetPlayers()) do
					if player.Character then
						local rootPart = player.Character:FindFirstChild("HumanoidRootPart")
						if rootPart then
							local healthBar = rootPart:FindFirstChild("HealthBar")
							if healthBar then
								healthBar.Enabled = true
							end
						end
					end
				end
			end
	
			local circleTween = game:GetService("TweenService"):Create(script.Parent.Parent.Circle, TweenInfo.new(0.25), {Position = targetPosition})
			local toggleTween = game:GetService("TweenService"):Create(script.Parent.Parent, TweenInfo.new(0.25), {ImageColor3 = targetColor})
	
			circleTween:Play()
			toggleTween:Play()
	
			circleTween.Completed:Connect(function()
				debounce = false
				toggled = not toggled
				pcall(callback, toggled)
			end)
		end
	end)
	
	
	
	
	
	
	UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
	
		if gameProcessedEvent then return end
		if input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == Enum.KeyCode[script.Parent.Parent.Parent.Parent.Parent.SettingFrame.HealthBarSetting.Action1Text.Text] then
	
			if not debounce then
				debounce = true
	
				local targetPosition, targetColor
	
				if toggled then
					targetPosition = UDim2.new(0.05, 0,0, 2)
					targetColor = Color3.fromRGB(200, 200, 200)
	
					toggleHealthBars()
	
					local Players = game:GetService("Players")
	
					for _, player in pairs(Players:GetPlayers()) do
						if player.Character then
							local rootPart = player.Character:FindFirstChild("HumanoidRootPart")
							if rootPart then
								local healthBar = rootPart:FindFirstChild("HealthBar")
								if healthBar then
									healthBar.Enabled = false
								end
							end
						end
					end
	
				else
					targetPosition = UDim2.new(0.45, 0,0, 2)
					targetColor = Color3.fromRGB(53, 255, 110)
	
					toggleHealthBars()
	
	
					local Players = game:GetService("Players")
	
					for _, player in pairs(Players:GetPlayers()) do
						if player.Character then
							local rootPart = player.Character:FindFirstChild("HumanoidRootPart")
							if rootPart then
								local healthBar = rootPart:FindFirstChild("HealthBar")
								if healthBar then
									healthBar.Enabled = true
								end
							end
						end
					end
				end
	
				local circleTween = game:GetService("TweenService"):Create(script.Parent.Parent.Circle, TweenInfo.new(0.25), {Position = targetPosition})
				local toggleTween = game:GetService("TweenService"):Create(script.Parent.Parent, TweenInfo.new(0.25), {ImageColor3 = targetColor})
	
				circleTween:Play()
				toggleTween:Play()
	
				circleTween.Completed:Connect(function()
					debounce = false
					toggled = not toggled
					pcall(callback, toggled)
				end)
			end
		end	
	end)
end;
task.spawn(C_d6);
-- StarterGui.VoxlHubRL.test1.1.Alwayssetposition
local function C_dc()
local script = G2L["dc"];
	local Main = script.Parent.Main
	local Setting = script.Parent.setting
	local Esp = script.Parent.esp
	local Combat = script.Parent.combat
	local Player = script.Parent.Player
	
	
		Main.BackgroundTransparency = 0.65
	Setting.BackgroundTransparency = 0.85
	Esp.BackgroundTransparency = 0.85
	Combat.BackgroundTransparency = 0.85
	Player.BackgroundTransparency = 0.85
	
	
	script.Parent.Position = UDim2.new(0.760, 0, 0.665, 0)
end;
task.spawn(C_dc);
-- StarterGui.VoxlHubRL.Open/close
local function C_dd()
local script = G2L["dd"];
	local UserInputService = game:GetService("UserInputService")
	local player = game.Players.LocalPlayer
	local playerGui = player:WaitForChild("PlayerGui")
	
	local isVisible = false
	
	-- Function to toggle the GUI visibility
	local function toggleGuiVisibility()
		if isVisible == false then
			isVisible = true
			script.Parent["test1.1"].Visible = true
		else
			isVisible = false
			script.Parent["test1.1"].Visible = false
		end
	end
	
	-- Listen for key presses
	UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
		-- Make sure it's not a game-processed event (e.g., typing in a textbox)
		if gameProcessedEvent then return end
	
		-- Check if the pressed key is Left Alt
		if input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == Enum.KeyCode[script.Parent["test1.1"].SettingFrame.ToggleUI.Action1Text.Text] then
			toggleGuiVisibility()
		end
	end)
	
	
end;
task.spawn(C_dd);
-- StarterGui.VoxlHubRL.AnticheatBypass
local function C_de()
local script = G2L["de"];
	--// client anticheat bypass
	
	do
		local function trigger_callback()
			local anticheat_mode = library.flags["Anticheat Mode"]
	
			if anticheat_mode == "Block" then 
				task_spawn(function()
					global_variables.block_all_remotes = true
					global_variables.block_all_animations = true
	
					wait(1)
	
					global_variables.block_all_animations = false
					global_variables.block_all_remotes = false
				end)
			elseif anticheat_mode == "Kick" then 
				player:Kick("Anticheat Triggered")
			end
		end 
	
		local nil_instances = getnilinstances()
		local ban_animation_ids = {}
	
		for index = 1, #nil_instances do 
			local value = nil_instances[index]
	
			if value.ClassName == "AnimationTrack" then 
				local animation_instance = value.Animation
	
				if not animation_instance.Parent then
					ban_animation_ids[animation_instance.AnimationId] = true
				end
			end
		end
	
		if not ban_animation_ids["rbxassetid://4595066903"] then 
			ban_animation_ids["rbxassetid://4595066903"] = true
		end
	
		local humanoid = workspace.NPCs:FindFirstChildWhichIsA("Humanoid", true)
	
		local animation = instance_new("Animation")
		animation.AnimationId = "rbxassetid://180435571"
	
		local animation_play = humanoid:LoadAnimation(animation).Play
	
		local old_animation_play
		old_animation_play = replaceclosure(animation_play, newcclosure(function(self, ...)
			if global_variables.block_all_animations then 
				return
			end 
	
			if typeof(self) == "Instance" and self.ClassName == "AnimationTrack" then
				local animation_id = self.Animation.AnimationId:gsub("[^%w%s_]+", "")
	
				if ban_animation_ids[animation_id] then 
					return trigger_callback()
				end
			end
	
			return old_animation_play(self, ...)
		end))
	
		local blacklisted_character_descendants = {}
	
		local function update_character_blacklist(character)
			wait(1)
	
			local character_descendants = character:GetDescendants()
	
			for index = 1, #character_descendants do 
				local descendant = character_descendants[index]
	
				if not ((descendant.ClassName == "Accessory" and (descendant.Name == "Charge" or descendant.Name == "Blindness" or descendant.Name == "DamageMPStack" or descendant.Name == "VisionBlur" or descendant.Name == "Sprint" or descendant.Name == "Climbing" or descendant.Name == "ClimbCooldown")) or (descendant.ClassName == "BodyVelocity" and descendant.Name == "DodgeVel") or (descendant.ClassName == "BodyPosition" and descendant.Name == "BodyPosition")) then 
					blacklisted_character_descendants[descendant] = true
				end
			end
		end
	
		local character = player.Character or player.CharacterAdded:Wait()
	
		update_character_blacklist(character)
		player.CharacterAdded:Connect(update_character_blacklist)
	
		local old_destroy
		old_destroy = replaceclosure(game.Destroy, newcclosure(function(self)
			if typeof(self) == "Instance" and blacklisted_character_descendants[self] then
				return trigger_callback()
			end
	
			return old_destroy(self)
		end))
	
		local old_remove
		old_remove = replaceclosure(game.Remove, newcclosure(function(self)
			if typeof(self) == "Instance" and blacklisted_character_descendants[self] then
				return trigger_callback()
			end
	
			return old_remove(self)
		end))
	
		local old_destroy_2
		old_destroy_2 = replaceclosure(game.destroy, newcclosure(function(self)
			if typeof(self) == "Instance" and blacklisted_character_descendants[self] then
				return trigger_callback()
			end
	
			return old_destroy_2(self)
		end))
	
		local old_remove_2
		old_remove_2 = replaceclosure(game.remove, newcclosure(function(self)
			if typeof(self) == "Instance" and blacklisted_character_descendants[self] then
				return trigger_callback()
			end
	
			return old_remove_2(self)
		end))
	
		local old_add_item
		old_add_item = replaceclosure(services.Debris.AddItem, newcclosure(function(self, object, duration)
			if blacklisted_character_descendants[object] then
				return trigger_callback()
			end
	
			return old_add_item(self, object, duration)
		end))
	
		local old_add_item_2
		old_add_item_2 = replaceclosure(services.Debris.addItem, newcclosure(function(self, object, duration)
			if blacklisted_character_descendants[object] then
				return trigger_callback()
			end
	
			return old_add_item(self, object, duration)
		end))
	
		local old_clear_all_children
		old_clear_all_children = replaceclosure(game.ClearAllChildren, newcclosure(function(self)
			local character = player.Character
	
			if character and self == character then 
				return trigger_callback() 
			end
	
			return old_clear_all_children(self)
		end))
	
		local old_clear_all_children_2
		old_clear_all_children_2 = replaceclosure(game.clearAllChildren, newcclosure(function(self)
			local character = player.Character
	
			if character and self == character then 
				return trigger_callback() 
			end
	
			return old_clear_all_children_2(self)
		end))
	
		local old_coroutine_wrap
		old_coroutine_wrap = replaceclosure(coroutine.wrap, newcclosure(function(func)
			if type(func) == "function" and islclosure(func) then
				local upvalues = getupvalues(func)
	
				if #upvalues == 1 and upvalues[1] == services.RunService and getinfo(func, "n").name == "" then
					return function() end
				end
			end
	
			return old_coroutine_wrap(func)
		end))
	
		local old_namecall
		old_namecall = hookmetamethod(game, "__namecall", function(self, ...)
			local arguments = {...}
			local method = string.lower(getnamecallmethod())
	
			if ((not checkcaller() and method == "destroy") or method == "remove") and typeof(self) == "Instance" and blacklisted_character_descendants[self] then 
				return trigger_callback()
			elseif method == "additem" and self == services.Debris then 
				local object = arguments[1]
	
				if typeof(object) == "instance" and blacklisted_character_descendants[object] then
					return trigger_callback()
				end
			elseif method == "clearallchildren" then
				local character = player.Character
	
				if character and self == character then 
					return trigger_callback()
				end
			elseif method == "play" and typeof(self) == "Instance" and self.ClassName == "AnimationTrack" and ban_animation_ids[self.Animation.AnimationId] then 
				return trigger_callback()
			end
	
			return old_namecall(self, ...)
		end)
	
		local connections = getconnections(game.ScriptContext.Error)
	
		for index = 1, #connections do 
			connections[index]:Disable()
		end
	end
	
	--// keyhandler bypass
	
	do
		local key_handler = services.ReplicatedStorage:WaitForChild("Assets"):WaitForChild("Modules"):WaitForChild("KeyHandler")
	
		local patcher = {}
		patcher.__index = patcher
	
		local psu_struct = {
			stack_next = "sBgaL",
			register_c = 639954,
			register_bx = "jDWh3",
			register_b = -50014
		}
	
		function patcher.new(psu_function)
			return setmetatable({
				upvalues = getupvalues(psu_function),
				instructions = nil,
				stack = nil,
				indexes = {},
				current_instruction = 0
			}, patcher)
		end
	
		function patcher:grab_dependencies()
			for index, upvalue in ipairs(self.upvalues) do 
				if type(upvalue) == "table" then
					if upvalue[0] then
						local entry = upvalue[0]
	
						if entry and type(entry) == "table" then 
							if entry[psu_struct.stack_next] then 
								self.instructions = upvalue
							end
						end
					else
						self.stack = upvalue
					end
				end
			end
	
			assert(self.instructions, "unable to find instructions!")
			assert(self.stack, "unable to find stack!")
		end
	
		function patcher:patch_instruction(old_value, new_value)
			for index, value in next, new_value do 
				old_value[index] = value
			end
		end
	
		function patcher:patch_method(method, ...)
			if method == 1 then
				local current_instruction = self.current_instruction
				local eq_amount = 0
	
				while true do
					local instruction = self.instructions[current_instruction] 
	
					if type(instruction[psu_struct.register_b]) == "table" then 
						eq_amount = eq_amount + 1
					else
						eq_amount = 0
					end
	
					if eq_amount == 2 then 
						local to_patch_instruction = self.instructions[current_instruction - 1]
						local go_to_instruction = instruction[psu_struct.register_b]
	
						self:patch_instruction(to_patch_instruction, go_to_instruction)
						current_instruction = table_find(self.instructions, go_to_instruction)
						break
					end
	
					current_instruction = current_instruction + 1
				end
	
				self.current_instruction = current_instruction
			elseif method == 2 then 
				local current_instruction = self.current_instruction
				local to_patch_instruction
	
				while true do 
					local instruction = self.instructions[current_instruction]
	
					if type(instruction[psu_struct.register_b]) == "table" then 
						if self.instructions[current_instruction + 2][psu_struct.register_c] == "LocalPlayer" then 
							local to_patch_instruction = instruction
							local go_to_instruction = instruction[psu_struct.register_b]
	
							self:patch_instruction(to_patch_instruction, go_to_instruction)
							current_instruction = table_find(self.instructions, go_to_instruction)
							break
						end
					end
	
					current_instruction = current_instruction + 1
				end
	
				self.current_instruction = current_instruction
			elseif method == 3 then
				local current_instruction = self.current_instruction
				local to_patch_instruction
	
				while true do 
					local instruction = self.instructions[current_instruction]
	
					if type(instruction[psu_struct.register_b]) == "table" then 
						if self.instructions[current_instruction - 3][psu_struct.register_c] == "FindFirstChild" then 
							local to_patch_instruction = instruction
							local go_to_instruction = instruction[psu_struct.register_b]
	
							self:patch_instruction(to_patch_instruction, go_to_instruction)
							current_instruction = table_find(self.instructions, go_to_instruction)
							break
						end
					end
	
					current_instruction = current_instruction + 1
				end
	
				self.current_instruction = current_instruction
			elseif method == 4 then
				local current_instruction = self.current_instruction
				local to_patch_instruction
	
				while true do 
					local instruction = self.instructions[current_instruction]
	
					if type(instruction[psu_struct.register_b]) == "table" then 
						if type(self.instructions[current_instruction + 2][psu_struct.register_bx]) == "table" and type(self.instructions[current_instruction + 5][psu_struct.register_bx]) == "table" then 
							local to_patch_instruction = instruction
							local go_to_instruction = instruction[psu_struct.register_b]
	
							self:patch_instruction(to_patch_instruction, go_to_instruction)
							current_instruction = table_find(self.instructions, go_to_instruction)
							break
						end
					end
	
					current_instruction = current_instruction + 1
				end
	
				self.current_instruction = current_instruction
			elseif method == 5 then
				local current_instruction = self.current_instruction
				local to_patch_instruction
	
				local arguments = {...}
	
				while true do 
					local instruction = self.instructions[current_instruction]
	
					if type(instruction[psu_struct.register_b]) == "table" then 
						if self.instructions[current_instruction + arguments[1]][psu_struct.register_b] == "EEKEWAEJIWAJDOIWAJDIOJAWDIOJAWODJOAIW" then 
							local to_patch_instruction = instruction
							local go_to_instruction = instruction[psu_struct.register_b]
	
							self:patch_instruction(to_patch_instruction, go_to_instruction)
							current_instruction = table_find(self.instructions, go_to_instruction)
							break
						end
					end
	
					current_instruction = current_instruction + 1
				end
	
				self.current_instruction = current_instruction
			elseif method == 6 then
				local current_instruction = self.current_instruction
				local to_patch_instruction
	
				while true do 
					local instruction = self.instructions[current_instruction]
	
					if type(instruction[psu_struct.register_b]) == "table" then 
						if type(self.instructions[current_instruction + 4][psu_struct.register_b]) == "table" then 
							local to_patch_instruction = instruction
							local go_to_instruction = self.instructions[current_instruction + 4][psu_struct.register_b]
	
							self:patch_instruction(to_patch_instruction, go_to_instruction)
							current_instruction = table_find(self.instructions, go_to_instruction)
							break
						end
					end
	
					current_instruction = current_instruction + 1
				end
	
				self.current_instruction = current_instruction
			elseif method == 7 then
				local current_instruction = self.current_instruction
				local to_patch_instruction
	
				while true do 
					local instruction = self.instructions[current_instruction]
	
					if type(instruction[psu_struct.register_b]) == "table" then 
						local success = true
						for index = 1, 5 do 
							if type(self.instructions[current_instruction + index][psu_struct.register_b]) ~= "table" then 
								success = false
							end
						end
	
						if success then
							local to_patch_instruction = instruction
							local go_to_instruction = instruction[psu_struct.register_b]
	
							self:patch_instruction(to_patch_instruction, go_to_instruction)
							current_instruction = table_find(self.instructions, go_to_instruction)
							break
						end
					end
	
					current_instruction = current_instruction + 1
				end
	
				self.current_instruction = current_instruction
			end
		end
	
		function patcher:patch_instructions(patch_type)
			if patch_type == 1 then -- module type
				self.instructions[0] = self.instructions[#self.instructions - 5]
			elseif patch_type == 2 then -- getkey type
				for index = 1, 7 do 
					if index == 5 then 
						self:patch_method(5, 9)
						self:patch_method(5, 6)
						self:patch_method(5, 6)
					else 
						self:patch_method(index)
					end
				end
			end
		end
	
		function patcher:patch(patch_type)
			self:grab_dependencies()
	
			self:patch_instructions(patch_type)
		end
	
		--// assert(getscripthash(key_handler) == "28607f8aeb5399560e87712f42c5a6700c96c6c4d9f3209004c89bfa7766916410af5b0e6492eafb55c57b261693b192", "KeyHandler Script Updated!")
	
		local character = player.Character or player.CharacterAdded:Wait()
		local input_script = character:WaitForChild("CharacterHandler"):WaitForChild("Input")
	
		--// assert(getscripthash(input_script) == "29e1a68e700408e58d97ab1b19afb63a8b50a0c868635d7e8abc4a81002639a3b63f4061a726c7dfc1eecf989da70931", "Input Script Updated!")
	
		local input_protos = getprotos(getscriptclosure(input_script))
	
		for index = 1, #input_protos do 
			local proto = input_protos[index]
			local constants = getconstants(proto)
	
			if table_find(constants, "SpeedBoost") and table_find(constants, "HasHammer") then 
				local dodge_function = getproto(proto, 1)
	
				setupvalue(dodge_function, 1, function() end)
				setupvalue(dodge_function, 2,  function(key)
					dodge_fpe_key = tonumber(("%0.50f"):format(key)) -- terrible method
				end)
				setupvalue(dodge_function, 3, tonumber)
				setupvalue(dodge_function, 4, tostring)
				setupvalue(dodge_function, 5, function() end)
	
				dodge_function()
	
				break
			end
		end
	
		local keyhandler_module = require(key_handler)
	
		local module_patcher = patcher.new(keyhandler_module)
		module_patcher:patch(1)
	
		local get_key = keyhandler_module()[1]
	
		local get_key_patcher = patcher.new(get_key)
		get_key_patcher:patch(2)
	
		local remote_cache = {}
		local character_cache
		local live_folder = workspace:WaitForChild("Live")
	
		global_variables.remotes = setmetatable({}, {
			__index = function(self, index)
				local cached_remote = remote_cache[index]
				local remote_result
	
				if player.Character ~= character_cache then
					remote_result = get_key(index == "Dodge" and dodge_fpe_key or index, "plum")
	
					if remote_result and typeof(remote_result) == "Instance" and remote_result:IsDescendantOf(live_folder) then 
						character_cache = player.Character
	
						remote_cache[index] = remote_result
						return remote_result
					end
				end
	
				if not cached_remote then 
					remote_result = remote_result or get_key(index == "Dodge" and dodge_fpe_key or index, "plum")
	
					if remote_result and typeof(remote_result) == "Instance" then
						remote_cache[index] = remote_result
					end 
	
					return remote_result
				end 
	
				return cached_remote
			end
		})
	end
end;
task.spawn(C_de);

return G2L["1"], require;
